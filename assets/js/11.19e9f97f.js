(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{192:function(a,e,s){"use strict";s.r(e);var t=s(0),r=Object(t.a)({},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"docker容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker容器","aria-hidden":"true"}},[a._v("#")]),a._v(" Docker容器")]),a._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),s("p",[a._v("镜像（"),s("code",[a._v("Image")]),a._v("）和容器（"),s("code",[a._v("Container")]),a._v("）的关系，就像是面向对象程序设计中的 "),s("code",[a._v("类")]),a._v(" 和 "),s("code",[a._v("实例")]),a._v(" 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")]),a._v(" "),s("p",[a._v("容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Linux_namespaces",target:"_blank",rel:"noopener noreferrer"}},[a._v("命名空间"),s("OutboundLink")],1),a._v("。因此容器可以拥有自己的 "),s("code",[a._v("root")]),a._v(" 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。")]),a._v(" "),s("p",[a._v("前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为"),s("strong",[a._v("容器存储层")]),a._v("。")]),a._v(" "),s("p",[a._v("容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。")]),a._v(" "),s("p",[a._v("按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 "),s("code",[a._v("数据卷（Volume）")]),a._v("、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。")]),a._v(" "),s("p",[a._v("数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。")]),a._v(" "),s("h2",{attrs:{id:"容器使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器使用","aria-hidden":"true"}},[a._v("#")]),a._v(" 容器使用")]),a._v(" "),s("h3",{attrs:{id:"启动容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 启动容器")]),a._v(" "),s("p",[a._v("启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（"),s("code",[a._v("stopped")]),a._v("）的容器重新启动。")]),a._v(" "),s("p",[a._v("因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。")]),a._v(" "),s("h4",{attrs:{id:"新建并启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新建并启动","aria-hidden":"true"}},[a._v("#")]),a._v(" 新建并启动")]),a._v(" "),s("p",[a._v("所需要的命令主要为 "),s("code",[a._v("docker run")]),a._v("。")]),a._v(" "),s("p",[a._v("例如，下面的命令输出一个 “Hello World”，之后终止容器。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker run centos /bin/echo "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Hello world'")]),a._v("\nHello world\n")])])]),s("p",[a._v("这跟在本地直接执行 "),s("code",[a._v("/bin/echo 'hello world'")]),a._v(" 几乎感觉不出任何区别。")]),a._v(" "),s("p",[a._v("下面的命令则启动一个 bash 终端，允许用户进行交互。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker run -t -i centos /bin/bash\nroot@af8bae53bdd3:/"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n")])])]),s("p",[a._v("其中，"),s("code",[a._v("-t")]),a._v(" 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， "),s("code",[a._v("-i")]),a._v(" 则让容器的标准输入保持打开。")]),a._v(" "),s("p",[a._v("在交互模式下，用户可以通过所创建的终端来输入命令，例如")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("root@af8bae53bdd3:/"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# pwd")]),a._v("\n/\nroot@af8bae53bdd3:/"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ls")]),a._v("\nbin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var\n")])])]),s("p",[a._v("当利用 "),s("code",[a._v("docker run")]),a._v(" 来创建容器时，Docker 在后台运行的标准操作包括：")]),a._v(" "),s("ul",[s("li",[a._v("检查本地是否存在指定的镜像，不存在就从公有仓库下载")]),a._v(" "),s("li",[a._v("利用镜像创建并启动一个容器")]),a._v(" "),s("li",[a._v("分配一个文件系统，并在只读的镜像层外面挂载一层可读写层")]),a._v(" "),s("li",[a._v("从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去")]),a._v(" "),s("li",[a._v("从地址池配置一个 ip 地址给容器")]),a._v(" "),s("li",[a._v("执行用户指定的应用程序")]),a._v(" "),s("li",[a._v("执行完毕后容器被终止")])]),a._v(" "),s("h4",{attrs:{id:"启动已终止容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动已终止容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 启动已终止容器")]),a._v(" "),s("p",[a._v("可以利用 "),s("code",[a._v("docker container start")]),a._v(" 命令，直接将一个已经终止的容器启动运行。")]),a._v(" "),s("p",[a._v("容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 "),s("code",[a._v("ps")]),a._v(" 或 "),s("code",[a._v("top")]),a._v(" 来查看进程信息。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("root@ba267838cc1b:/"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ps")]),a._v("\n  PID TTY          TIME CMD\n    1 ?        00:00:00 "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n   11 ?        00:00:00 "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v("\n")])])]),s("p",[a._v("可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。")]),a._v(" "),s("h4",{attrs:{id:"守护态运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#守护态运行","aria-hidden":"true"}},[a._v("#")]),a._v(" 守护态运行")]),a._v(" "),s("p",[a._v("更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 "),s("code",[a._v("-d")]),a._v(" 参数来实现。")]),a._v(" "),s("p",[a._v("下面举两个例子来说明一下。")]),a._v(" "),s("p",[a._v("如果不使用 "),s("code",[a._v("-d")]),a._v(" 参数运行容器。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker run centos /bin/sh -c "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"while true; do echo hello world; sleep 1; done"')]),a._v("\nhello world\nhello world\nhello world\nhello world\n")])])]),s("p",[a._v("容器会把输出的结果 (STDOUT) 打印到宿主机上面")]),a._v(" "),s("p",[a._v("如果使用了 "),s("code",[a._v("-d")]),a._v(" 参数运行容器。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker run -d centos /bin/sh -c "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"while true; do echo hello world; sleep 1; done"')]),a._v("\n77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a\n")])])]),s("p",[a._v("此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 "),s("code",[a._v("docker logs")]),a._v(" 查看)。")]),a._v(" "),s("p",[s("strong",[a._v("注：")]),a._v(" 容器是否会长久运行，是和 "),s("code",[a._v("docker run")]),a._v(" 指定的命令有关，和 "),s("code",[a._v("-d")]),a._v(" 参数无关。")]),a._v(" "),s("p",[a._v("使用 "),s("code",[a._v("-d")]),a._v(" 参数启动后会返回一个唯一的 id，也可以通过 "),s("code",[a._v("docker container ls")]),a._v(" 命令来查看容器信息。")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("$ docker container ls\nCONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES\n77b2dc01fe0f  centos:7    /bin/sh -c 'while tr  2 minutes ago  Up 1 minute        agitated_wright\n")])])]),s("p",[a._v("要获取容器的输出信息，可以通过 "),s("code",[a._v("docker container logs")]),a._v(" 命令。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker container logs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID or NAMES"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\nhello world\nhello world\nhello world\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v(".")]),a._v("\n")])])]),s("h3",{attrs:{id:"终止容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#终止容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 终止容器")]),a._v(" "),s("p",[a._v("可以使用 "),s("code",[a._v("docker container stop")]),a._v(" 来终止一个运行中的容器。")]),a._v(" "),s("p",[a._v("此外，当 Docker 容器中指定的应用终结时，容器也自动终止。")]),a._v(" "),s("p",[a._v("例如对于上一章节中只启动了一个终端的容器，用户通过 "),s("code",[a._v("exit")]),a._v(" 命令或 "),s("code",[a._v("Ctrl+d")]),a._v(" 来退出终端时，所创建的容器立刻终止。")]),a._v(" "),s("p",[a._v("终止状态的容器可以用 "),s("code",[a._v("docker container ls -a")]),a._v(" 命令看到。例如")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -a\nCONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES\nba267838cc1b        centos:7            "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/bin/bash"')]),a._v("            30 minutes ago      Exited "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" About a minute ago                       trusting_newton\n")])])]),s("p",[a._v("处于终止状态的容器，可以通过 "),s("code",[a._v("docker container start")]),a._v(" 命令来重新启动。")]),a._v(" "),s("p",[a._v("此外，"),s("code",[a._v("docker container restart")]),a._v(" 命令会将一个运行态的容器终止，然后再重新启动它。")]),a._v(" "),s("h3",{attrs:{id:"进入容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进入容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 进入容器")]),a._v(" "),s("p",[a._v("在使用 "),s("code",[a._v("-d")]),a._v(" 参数时，容器启动后会进入后台。")]),a._v(" "),s("p",[a._v("某些时候需要进入容器进行操作，包括使用 "),s("code",[a._v("docker attach")]),a._v(" 命令或 "),s("code",[a._v("docker exec")]),a._v(" 命令，推荐大家使用 "),s("code",[a._v("docker exec")]),a._v(" 命令，原因会在下面说明。")]),a._v(" "),s("h4",{attrs:{id:"attach-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#attach-命令","aria-hidden":"true"}},[a._v("#")]),a._v(" "),s("code",[a._v("attach")]),a._v(" 命令")]),a._v(" "),s("p",[s("code",[a._v("docker attach")]),a._v(" 是 Docker 自带的命令。下面示例如何使用该命令。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker run -dit centos\n243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550\n\n$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n243c32535da7        centos:latest       "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/bin/bash"')]),a._v("         18 seconds ago      Up 17 seconds                           nostalgic_hypatia\n\n$ docker attach 243c\nroot@243c32535da7:/"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n")])])]),s("p",[s("em",[a._v("注意：")]),a._v(" 如果从这个 stdin 中 exit，会导致容器的停止。")]),a._v(" "),s("h4",{attrs:{id:"exec-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exec-命令","aria-hidden":"true"}},[a._v("#")]),a._v(" "),s("code",[a._v("exec")]),a._v(" 命令")]),a._v(" "),s("p",[s("code",[a._v("docker exec")]),a._v(" 后边可以跟多个参数，这里主要说明 "),s("code",[a._v("-i")]),a._v(" "),s("code",[a._v("-t")]),a._v(" 参数。")]),a._v(" "),s("p",[a._v("只用 "),s("code",[a._v("-i")]),a._v(" 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。")]),a._v(" "),s("p",[a._v("当 "),s("code",[a._v("-i")]),a._v(" "),s("code",[a._v("-t")]),a._v(" 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker run -dit centos\n69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6\n\n$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n69d137adef7a        ubuntu:latest       "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/bin/bash"')]),a._v("         18 seconds ago      Up 17 seconds                           zealous_swirles\n\n$ docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),a._v(" -i 69d1 "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\nbin\nboot\ndev\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\n\n$ docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),a._v(" -it 69d1 "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\nroot@69d137adef7a:/"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n")])])]),s("p",[a._v("如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 "),s("code",[a._v("docker exec")]),a._v(" 的原因。")]),a._v(" "),s("p",[a._v("更多参数说明请使用 "),s("code",[a._v("docker exec --help")]),a._v(" 查看。")]),a._v(" "),s("h3",{attrs:{id:"导出和导入容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导出和导入容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 导出和导入容器")]),a._v(" "),s("h4",{attrs:{id:"导出容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导出容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 导出容器")]),a._v(" "),s("p",[a._v("如果要导出本地某个容器，可以使用 "),s("code",[a._v("docker export")]),a._v(" 命令。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES\n7691a814370e        ubuntu:14.04        "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/bin/bash"')]),a._v("         36 hours ago        Exited "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" 21 hours ago                       "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),a._v("\n$ docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("export")]),a._v(" 7691a814370e "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" ubuntu.tar\n")])])]),s("p",[a._v("这样将导出容器快照到本地文件。")]),a._v(" "),s("h4",{attrs:{id:"导入容器快照"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导入容器快照","aria-hidden":"true"}},[a._v("#")]),a._v(" 导入容器快照")]),a._v(" "),s("p",[a._v("可以使用 "),s("code",[a._v("docker import")]),a._v(" 从容器快照文件中再导入为镜像，例如")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" ubuntu.tar "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("import")]),a._v(" - test/ubuntu:v1.0\n$ docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\nREPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE\ntest/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB\n")])])]),s("p",[a._v("此外，也可以通过指定 URL 或者某个目录来导入，例如")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("import")]),a._v(" http://example.com/exampleimage.tgz example/imagerepo\n")])])]),s("blockquote",[s("p",[a._v("注意：")]),a._v(" "),s("p",[a._v("用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。")])]),a._v(" "),s("h3",{attrs:{id:"查看容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 查看容器")]),a._v(" "),s("p",[a._v("使用 docker ps 来查看我们正在运行的容器")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker ps")]),a._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES\n7b422a71db6a        mysql:5.7           "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"docker-entrypoint..."')]),a._v("   5 seconds ago       Up 5 seconds        0.0.0.0:3306-"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("3306/tcp, 33060/tcp   mysql\n")])])]),s("p",[a._v("查看已经创建的容器")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker ps -a\n")])])]),s("p",[a._v("查看正在运行的容器")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker ps -s\n")])])]),s("p",[a._v("查询最后一次创建的容器")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker ps -l \n")])])]),s("p",[a._v("使用 "),s("strong",[a._v("docker port")]),a._v(" 可以查看指定 （ID 或者名字）容器的某个确定端口映射到宿主机的端口号")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker port mysql")]),a._v("\n3306/tcp -"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 0.0.0.0:3306\n")])])]),s("p",[a._v("docker logs [ID或者名字] 可以查看容器内部的标准输出")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("docker logs -f mysql\n\ndocker logs -f 7b422a71db6a\n")])])]),s("ul",[s("li",[s("strong",[a._v("-f：")]),a._v(" 让 "),s("strong",[a._v("docker logs")]),a._v(" 像使用 "),s("strong",[a._v("tail -f")]),a._v(" 一样来输出容器内部的标准输出。")])]),a._v(" "),s("p",[a._v("还可以使用 docker top 来查看容器内部运行的进程")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker top mysql")]),a._v("\nUID       PID    PPID       C    STIME     TTY            TIME                CMD\npolkitd   3962    3945       0    18:39       ?           00:00:00            mysqld\n")])])]),s("p",[a._v("使用 "),s("strong",[a._v("docker inspect")]),a._v(" 来查看 Docker 的底层信息。它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker inspect mysql\n")])])]),s("h3",{attrs:{id:"重启容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重启容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 重启容器")]),a._v(" "),s("p",[a._v("已经停止的容器，我们可以使用命令 docker start 来启动。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker start mysql\n")])])]),s("h3",{attrs:{id:"删除容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 删除容器")]),a._v(" "),s("p",[a._v("我们可以使用 "),s("code",[a._v("docker rm")]),a._v(" 命令来删除不需要的容器：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker rm 9490b017fdf6 5198a90e2406 d89a78578846\n")])])]),s("p",[a._v("注意：删除容器时，容器必须是停止状态，否则会报错。如果要强制删除，需要添加参数：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker rm -f 9490b017fdf6 5198a90e2406 d89a78578846\n")])])]),s("h4",{attrs:{id:"删除所有处于终止状态的容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除所有处于终止状态的容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 删除所有处于终止状态的容器")]),a._v(" "),s("p",[a._v("用 "),s("code",[a._v("docker container ls -a")]),a._v(" 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker container prune\n")])])])])},[],!1,null,null,null);e.default=r.exports}}]);