(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{197:function(a,t,s){"use strict";s.r(t);var e=s(0),r=Object(e.a)({},function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"附录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#附录","aria-hidden":"true"}},[a._v("#")]),a._v(" 附录")]),a._v(" "),s("h3",{attrs:{id:"常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令","aria-hidden":"true"}},[a._v("#")]),a._v(" 常用命令")]),a._v(" "),s("h4",{attrs:{id:"基本语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法","aria-hidden":"true"}},[a._v("#")]),a._v(" 基本语法")]),a._v(" "),s("p",[a._v("Docker 命令有两大类，客户端命令和服务端命令。前者是主要的操作接口，后者用来启动 Docker Daemon。")]),a._v(" "),s("ul",[s("li",[a._v("客户端命令：基本命令格式为 "),s("code",[a._v("docker [OPTIONS] COMMAND [arg...]")]),a._v("；")]),a._v(" "),s("li",[a._v("服务端命令：基本命令格式为 "),s("code",[a._v("dockerd [OPTIONS]")]),a._v("。")])]),a._v(" "),s("h4",{attrs:{id:"客户端命令选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端命令选项","aria-hidden":"true"}},[a._v("#")]),a._v(" 客户端命令选项")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("--config"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：指定客户端配置文件，默认为 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("/.docker"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("；\n-D"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：是否使用 debug 模式。默认不开启；\n-H, --host"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("：指定命令对应 Docker 守护进程的监听接口，可以为 unix 套接字（unix:///path/to/socket），文件句柄（fd://socketfd）或 tcp 套接字（tcp://"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("host"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(":port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("），默认为 unix:///var/run/docker.sock；\n-l, --log-level"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"debug|info|warn|error|fatal"')]),a._v("：指定日志输出级别；\n--tls"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：是否对 Docker 守护进程启用 TLS 安全机制，默认为否；\n--tlscacert"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" /.docker/ca.pem：TLS CA 签名的可信证书文件路径；\n--tlscert"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" /.docker/cert.pem：TLS 可信证书文件路径；\n--tlscert"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" /.docker/key.pem：TLS 密钥文件路径；\n--tlsverify"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：启用 TLS 校验，默认为否。\n")])])]),s("h4",{attrs:{id:"dockerd-命令选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerd-命令选项","aria-hidden":"true"}},[a._v("#")]),a._v(" dockerd 命令选项")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("--api-cors-header"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：CORS 头部域，默认不允许 CORS，要允许任意的跨域访问，可以指定为 “*”；\n--authorization-plugin"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：载入认证的插件；\n-b"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：将容器挂载到一个已存在的网桥上。指定为 "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'none'")]),a._v(" 时则禁用容器的网络，与 --bip 选项互斥；\n--bip"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：让动态创建的 docker0 网桥采用给定的 CIDR 地址"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" 与 -b 选项互斥；\n--cgroup-parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：指定 cgroup 的父组，默认 fs cgroup 驱动为 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("/docker"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("，systemd cgroup 驱动为 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("system.slice"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("；\n--cluster-store"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：构成集群（如 Swarm）时，集群键值数据库服务地址；\n--cluster-advertise"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：构成集群时，自身的被访问地址，可以为 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("host:port"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" 或 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("interface:port"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("；\n--cluster-store-opt"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：构成集群时，键值数据库的配置选项；\n--config-file"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/etc/docker/daemon.json"')]),a._v("：daemon 配置文件路径；\n--containerd"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：containerd 文件的路径；\n-D, --debug"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：是否使用 Debug 模式。缺省为 false；\n--default-gateway"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：容器的 IPv4 网关地址，必须在网桥的子网段内；\n--default-gateway-v6"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：容器的 IPv6 网关地址；\n--default-ulimit"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("：默认的 "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ulimit")]),a._v(" 值；\n--disable-legacy-registry"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：是否允许访问旧版本的镜像仓库服务器；\n--dns"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：指定容器使用的 DNS 服务器地址；\n--dns-opt"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：DNS 选项；\n--dns-search"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("：DNS 搜索域；\n--exec-opt"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("：运行时的执行选项；\n--exec-root"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：容器执行状态文件的根路径，默认为 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("/var/run/docker"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("；\n--fixed-cidr"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：限定分配 IPv4 地址范围；\n--fixed-cidr-v6"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：限定分配 IPv6 地址范围；\n-G, --group"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：分配给 unix 套接字的组，默认为 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("docker"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("；\n-g, --graph"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：Docker 运行时的根路径，默认为 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("/var/lib/docker"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("；\n-H, --host"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("：指定命令对应 Docker daemon 的监听接口，可以为 unix 套接字（unix:///path/to/socket），文件句柄（fd://socketfd）或 tcp 套接字（tcp://"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("host"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(":port"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("），默认为 unix:///var/run/docker.sock；\n--icc"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：是否启用容器间以及跟 daemon 所在主机的通信。默认为 true。\n--insecure-registry"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("：允许访问给定的非安全仓库服务；\n--ip"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：绑定容器端口时候的默认 IP 地址。缺省为 0.0.0.0；\n--ip-forward"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：是否检查启动在 Docker 主机上的启用 IP 转发服务，默认开启。注意关闭该选项将不对系统转发能力进行任何检查修改；\n--ip-masq"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：是否进行地址伪装，用于容器访问外部网络，默认开启；\n--iptables"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：是否允许 Docker 添加 iptables 规则。缺省为 true；\n--ipv6"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：是否启用 IPv6 支持，默认关闭；\n-l, --log-level"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"debug|info|warn|error|fatal"')]),a._v("：指定日志输出级别；\n--label"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[]"')]),a._v("：添加指定的键值对标注；\n--log-driver"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"json-file|syslog|journald|gelf|fluentd|awslogs|splunk|etwlogs|gcplogs|none"')]),a._v("：指定日志后端驱动，默认为 json-file；\n--log-opt"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("：日志后端的选项；\n--mtu"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("VALUE：指定容器网络的 mtu；\n-p"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：指定 daemon 的 PID 文件路径。缺省为 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("/var/run/docker.pid"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("；\n--raw-logs：输出原始，未加色彩的日志信息；\n--registry-mirror"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("scheme"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("://"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("host"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("：指定 "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("docker pull"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" 时使用的注册服务器镜像地址；\n-s, --storage-driver"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("：指定使用给定的存储后端；\n--selinux-enabled"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：是否启用 SELinux 支持。缺省值为 false。SELinux 目前尚不支持 overlay 存储驱动；\n--storage-opt"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("：驱动后端选项；\n--tls"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：是否对 Docker daemon 启用 TLS 安全机制，默认为否；\n--tlscacert"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" /.docker/ca.pem：TLS CA 签名的可信证书文件路径；\n--tlscert"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" /.docker/cert.pem：TLS 可信证书文件路径；\n--tlscert"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" /.docker/key.pem：TLS 密钥文件路径；\n--tlsverify"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：启用 TLS 校验，默认为否；\n--userland-proxy"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("false：是否使用用户态代理来实现容器间和出容器的回环通信，默认为 true；\n--userns-remap"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("default"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("uid:gid"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("user:group"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("uid：指定容器的用户命名空间，默认是创建新的 UID 和 GID 映射到容器内进程。\n")])])]),s("h4",{attrs:{id:"客户端命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端命令","aria-hidden":"true"}},[a._v("#")]),a._v(" 客户端命令")]),a._v(" "),s("p",[a._v("可以通过 "),s("code",[a._v("docker COMMAND --help")]),a._v(" 来查看这些命令的具体用法。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("attach：依附到一个正在运行的容器中；\nbuild：从一个 Dockerfile 创建一个镜像；\ncommit：从一个容器的修改中创建一个新的镜像；\ncp：在容器和本地宿主系统之间复制文件中；\ncreate：创建一个新容器，但并不运行它；\ndiff：检查一个容器内文件系统的修改，包括修改和增加；\nevents：从服务端获取实时的事件；\nexec：在运行的容器内执行命令；\nexport：导出容器内容为一个 "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" 包；\nhistory：显示一个镜像的历史信息；\nimages：列出存在的镜像；\nimport：导入一个文件（典型为 "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" 包）路径或目录来创建一个本地镜像；\ninfo：显示一些相关的系统信息；\ninspect：显示一个容器的具体配置信息；\nkill：关闭一个运行中的容器 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("包括进程和所有相关资源"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("；\nload：从一个 "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" 包中加载一个镜像；\nlogin：注册或登录到一个 Docker 的仓库服务器；\nlogout：从 Docker 的仓库服务器登出；\nlogs：获取容器的 log 信息；\nnetwork：管理 Docker 的网络，包括查看、创建、删除、挂载、卸载等；\nnode：管理 swarm 集群中的节点，包括查看、更新、删除、提升/取消管理节点等；\npause：暂停一个容器中的所有进程；\nport：查找一个 nat 到一个私有网口的公共口；\nps：列出主机上的容器；\npull：从一个Docker的仓库服务器下拉一个镜像或仓库；\npush：将一个镜像或者仓库推送到一个 Docker 的注册服务器；\nrename：重命名一个容器；\nrestart：重启一个运行中的容器；\nrm：删除给定的若干个容器；\nrmi：删除给定的若干个镜像；\nrun：创建一个新容器，并在其中运行给定命令；\nsave：保存一个镜像为 "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" 包文件；\nsearch：在 Docker index 中搜索一个镜像；\nservice：管理 Docker 所启动的应用服务，包括创建、更新、删除等；\nstart：启动一个容器；\nstats：输出（一个或多个）容器的资源使用统计信息；\nstop：终止一个运行中的容器；\nswarm：管理 Docker swarm 集群，包括创建、加入、退出、更新等；\ntag：为一个镜像打标签；\ntop：查看一个容器中的正在运行的进程信息；\nunpause：将一个容器内所有的进程从暂停状态中恢复；\nupdate：更新指定的若干容器的配置信息；\nversion：输出 Docker 的版本信息；\nvolume：管理 Docker volume，包括查看、创建、删除等；\nwait：阻塞直到一个容器终止，然后输出它的退出符。\n")])])]),s("h4",{attrs:{id:"一张图总结-docker-的命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一张图总结-docker-的命令","aria-hidden":"true"}},[a._v("#")]),a._v(" 一张图总结 Docker 的命令")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://ww3.sinaimg.cn/large/006tNc79gy1g59ykwyvtjj30vl0u0wxr.jpg",alt:"Docker 命令总结"}})]),a._v(" "),s("p",[a._v("常用命令")]),a._v(" "),s("p",[a._v("查看 Docker 版本")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker version\n")])])]),s("p",[a._v("从 Docker 文件构建 Docker 映像")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker build -t image-name docker-file-location\n")])])]),s("p",[a._v("运行 Docker 映像")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker run -d image-name\n")])])]),s("p",[a._v("查看可用的 Docker 映像")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker images\n")])])]),s("p",[a._v("查看最近的运行容器")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker ps -l\n")])])]),s("p",[a._v("查看所有正在运行的容器")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker ps -a\n")])])]),s("p",[a._v("停止运行容器")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker stop container_id\n")])])]),s("p",[a._v("删除一个镜像")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker rmi image-name\n")])])]),s("p",[a._v("删除所有镜像")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker rmi $(docker images -q)\n")])])]),s("p",[a._v("强制删除所有镜像")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker rmi -r $(docker images -q)\n")])])]),s("p",[a._v("删除所有虚悬镜像")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker rmi $(docker images -q -f dangling=true)\n")])])]),s("p",[a._v("删除所有容器")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker rm $(docker ps -a -q)\n")])])]),s("p",[a._v("进入 Docker 容器")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker exec -it container-id /bin/bash\n")])])]),s("p",[a._v("查看所有数据卷")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker volume ls\n")])])]),s("p",[a._v("删除指定数据卷")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker volume rm [volume_name]\n")])])]),s("p",[a._v("删除所有未关联的数据卷")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker volume rm $(docker volume ls -qf dangling=true)\n")])])]),s("p",[a._v("从主机复制文件到容器")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("sudo docker cp host_path containerID:container_path\n")])])]),s("p",[a._v("从容器复制文件到主机")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("sudo docker cp containerID:container_path host_path\n")])])]),s("h3",{attrs:{id:"dockerfile-最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-最佳实践","aria-hidden":"true"}},[a._v("#")]),a._v(" Dockerfile 最佳实践")]),a._v(" "),s("h4",{attrs:{id:"一般性的指南和建议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一般性的指南和建议","aria-hidden":"true"}},[a._v("#")]),a._v(" 一般性的指南和建议")]),a._v(" "),s("h5",{attrs:{id:"容器应该是短暂的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器应该是短暂的","aria-hidden":"true"}},[a._v("#")]),a._v(" 容器应该是短暂的")]),a._v(" "),s("p",[a._v("通过 "),s("code",[a._v("Dockerfile")]),a._v(" 构建的镜像所启动的容器应该尽可能短暂（生命周期短）。「短暂」意味着可以停止和销毁容器，并且创建一个新容器并部署好所需的设置和配置工作量应该是极小的。")]),a._v(" "),s("h5",{attrs:{id:"使用-dockerignore-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-dockerignore-文件","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用 "),s("code",[a._v(".dockerignore")]),a._v(" 文件")]),a._v(" "),s("p",[a._v("使用 "),s("code",[a._v("Dockerfile")]),a._v(" 构建镜像时最好是将 "),s("code",[a._v("Dockerfile")]),a._v(" 放置在一个新建的空目录下。然后将构建镜像所需要的文件添加到该目录中。为了提高构建镜像的效率，你可以在目录下新建一个 "),s("code",[a._v(".dockerignore")]),a._v(" 文件来指定要忽略的文件和目录。"),s("code",[a._v(".dockerignore")]),a._v(" 文件的排除模式语法和 Git 的 "),s("code",[a._v(".gitignore")]),a._v(" 文件相似。")]),a._v(" "),s("h5",{attrs:{id:"使用多阶段构建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用多阶段构建","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用多阶段构建")]),a._v(" "),s("p",[a._v("在 "),s("code",[a._v("Docker 17.05")]),a._v(" 以上版本中，你可以使用 "),s("code",[a._v("多阶段构建")]),a._v(" 来减少所构建镜像的大小。")]),a._v(" "),s("h5",{attrs:{id:"避免安装不必要的包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#避免安装不必要的包","aria-hidden":"true"}},[a._v("#")]),a._v(" 避免安装不必要的包")]),a._v(" "),s("p",[a._v("为了降低复杂性、减少依赖、减小文件大小、节约构建时间，你应该避免安装任何不必要的包。例如，不要在数据库镜像中包含一个文本编辑器。")]),a._v(" "),s("h5",{attrs:{id:"一个容器只运行一个进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个容器只运行一个进程","aria-hidden":"true"}},[a._v("#")]),a._v(" 一个容器只运行一个进程")]),a._v(" "),s("p",[a._v("应该保证在一个容器中只运行一个进程。将多个应用解耦到不同容器中，保证了容器的横向扩展和复用。例如 web 应用应该包含三个容器：web应用、数据库、缓存。")]),a._v(" "),s("p",[a._v("如果容器互相依赖，你可以使用 "),s("code",[a._v("Docker 自定义网络")]),a._v(" 来把这些容器连接起来。")]),a._v(" "),s("h5",{attrs:{id:"镜像层数尽可能少"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像层数尽可能少","aria-hidden":"true"}},[a._v("#")]),a._v(" 镜像层数尽可能少")]),a._v(" "),s("p",[a._v("你需要在 "),s("code",[a._v("Dockerfile")]),a._v(" 可读性（也包括长期的可维护性）和减少层数之间做一个平衡。")]),a._v(" "),s("h5",{attrs:{id:"将多行参数排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将多行参数排序","aria-hidden":"true"}},[a._v("#")]),a._v(" 将多行参数排序")]),a._v(" "),s("p",[a._v("将多行参数按字母顺序排序（比如要安装多个包时）。这可以帮助你避免重复包含同一个包，更新包列表时也更容易。也便于 "),s("code",[a._v("PRs")]),a._v(" 阅读和审查。建议在反斜杠符号 "),s("code",[a._v("\\")]),a._v(" 之前添加一个空格，以增加可读性。")]),a._v(" "),s("p",[a._v("下面是来自 "),s("code",[a._v("buildpack-deps")]),a._v(" 镜像的例子：")]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("get update && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("y \\\n  bzr \\\n  cvs \\\n  git \\\n  mercurial \\\n  subversion\n")])])]),s("h5",{attrs:{id:"构建缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建缓存","aria-hidden":"true"}},[a._v("#")]),a._v(" 构建缓存")]),a._v(" "),s("p",[a._v("在镜像的构建过程中，Docker 会遍历 "),s("code",[a._v("Dockerfile")]),a._v(" 文件中的指令，然后按顺序执行。在执行每条指令之前，Docker 都会在缓存中查找是否已经存在可重用的镜像，如果有就使用现存的镜像，不再重复创建。如果你不想在构建过程中使用缓存，你可以在 "),s("code",[a._v("docker build")]),a._v(" 命令中使用 "),s("code",[a._v("--no-cache=true")]),a._v(" 选项。")]),a._v(" "),s("p",[a._v("但是，如果你想在构建的过程中使用缓存，你得明白什么时候会，什么时候不会找到匹配的镜像，遵循的基本规则如下：")]),a._v(" "),s("ul",[s("li",[a._v("从一个基础镜像开始（"),s("code",[a._v("FROM")]),a._v(" 指令指定），下一条指令将和该基础镜像的所有子镜像进行匹配，检查这些子镜像被创建时使用的指令是否和被检查的指令完全一样。如果不是，则缓存失效。")]),a._v(" "),s("li",[a._v("在大多数情况下，只需要简单地对比 "),s("code",[a._v("Dockerfile")]),a._v(" 中的指令和子镜像。然而，有些指令需要更多的检查和解释。")]),a._v(" "),s("li",[a._v("对于 "),s("code",[a._v("ADD")]),a._v(" 和 "),s("code",[a._v("COPY")]),a._v(" 指令，镜像中对应文件的内容也会被检查，每个文件都会计算出一个校验和。文件的最后修改时间和最后访问时间不会纳入校验。在缓存的查找过程中，会将这些校验和和已存在镜像中的文件校验和进行对比。如果文件有任何改变，比如内容和元数据，则缓存失效。")]),a._v(" "),s("li",[a._v("除了 "),s("code",[a._v("ADD")]),a._v(" 和 "),s("code",[a._v("COPY")]),a._v(" 指令，缓存匹配过程不会查看临时容器中的文件来决定缓存是否匹配。例如，当执行完 "),s("code",[a._v("RUN apt-get -y update")]),a._v(" 指令后，容器中一些文件被更新，但 Docker 不会检查这些文件。这种情况下，只有指令字符串本身被用来匹配缓存。")])]),a._v(" "),s("p",[a._v("一旦缓存失效，所有后续的 "),s("code",[a._v("Dockerfile")]),a._v(" 指令都将产生新的镜像，缓存不会被使用。")]),a._v(" "),s("h4",{attrs:{id:"dockerfile-指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-指令","aria-hidden":"true"}},[a._v("#")]),a._v(" Dockerfile 指令")]),a._v(" "),s("p",[a._v("下面针对 "),s("code",[a._v("Dockerfile")]),a._v(" 中各种指令的最佳编写方式给出建议。")]),a._v(" "),s("h5",{attrs:{id:"from"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#from","aria-hidden":"true"}},[a._v("#")]),a._v(" FROM")]),a._v(" "),s("p",[a._v("尽可能使用当前官方仓库作为你构建镜像的基础。推荐使用 "),s("a",{attrs:{href:"https://hub.docker.com/_/alpine/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Alpine"),s("OutboundLink")],1),a._v(" 镜像，因为它被严格控制并保持最小尺寸（目前小于 5 MB），但它仍然是一个完整的发行版。")]),a._v(" "),s("h5",{attrs:{id:"label"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#label","aria-hidden":"true"}},[a._v("#")]),a._v(" LABEL")]),a._v(" "),s("p",[a._v("你可以给镜像添加标签来帮助组织镜像、记录许可信息、辅助自动化构建等。每个标签一行，由 "),s("code",[a._v("LABEL")]),a._v("开头加上一个或多个标签对。下面的示例展示了各种不同的可能格式。"),s("code",[a._v("#")]),a._v(" 开头的行是注释内容。")]),a._v(" "),s("blockquote",[s("p",[a._v("注意：如果你的字符串中包含空格，必须将字符串放入引号中或者对空格使用转义。如果字符串内容本身就包含引号，必须对引号使用转义。")])]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Set one or more individual labels")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("LABEL")]),a._v(" com.example.version="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"0.0.1-beta"')]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("LABEL")]),a._v(" vendor="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"ACME Incorporated"')]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("LABEL")]),a._v(" com.example.release"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("date="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"2015-02-12"')]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("LABEL")]),a._v(" com.example.version.is"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("production="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("\n")])])]),s("p",[a._v("一个镜像可以包含多个标签，但建议将多个标签放入到一个 "),s("code",[a._v("LABEL")]),a._v(" 指令中。")]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Set multiple labels at once, using line-continuation characters to break long lines")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("LABEL")]),a._v(" vendor=ACME\\ Incorporated \\\n      com.example.is"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("beta= \\\n      com.example.is"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("production="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v(" \\\n      com.example.version="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"0.0.1-beta"')]),a._v(" \\\n      com.example.release"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("date="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"2015-02-12"')]),a._v("\n")])])]),s("p",[a._v("关于标签可以接受的键值对，参考 "),s("a",{attrs:{href:"https://docs.docker.com/engine/userguide/labels-custom-metadata/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Understanding object labels"),s("OutboundLink")],1),a._v("。关于查询标签信息，参考 "),s("a",{attrs:{href:"https://docs.docker.com/engine/userguide/labels-custom-metadata/#managing-labels-on-objects",target:"_blank",rel:"noopener noreferrer"}},[a._v("Managing labels on objects"),s("OutboundLink")],1),a._v("。")]),a._v(" "),s("h5",{attrs:{id:"run"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run","aria-hidden":"true"}},[a._v("#")]),a._v(" RUN")]),a._v(" "),s("p",[a._v("为了保持 "),s("code",[a._v("Dockerfile")]),a._v(" 文件的可读性，可理解性，以及可维护性，建议将长的或复杂的 "),s("code",[a._v("RUN")]),a._v(" 指令用反斜杠 "),s("code",[a._v("\\")]),a._v(" 分割成多行。")]),a._v(" "),s("h5",{attrs:{id:"apt-get"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#apt-get","aria-hidden":"true"}},[a._v("#")]),a._v(" apt-get")]),a._v(" "),s("p",[s("code",[a._v("RUN")]),a._v(" 指令最常见的用法是安装包用的 "),s("code",[a._v("apt-get")]),a._v("。因为 "),s("code",[a._v("RUN apt-get")]),a._v(" 指令会安装包，所以有几个问题需要注意。")]),a._v(" "),s("p",[a._v("不要使用 "),s("code",[a._v("RUN apt-get upgrade")]),a._v(" 或 "),s("code",[a._v("dist-upgrade")]),a._v("，因为许多基础镜像中的「必须」包不会在一个非特权容器中升级。如果基础镜像中的某个包过时了，你应该联系它的维护者。如果你确定某个特定的包，比如 "),s("code",[a._v("foo")]),a._v("，需要升级，使用 "),s("code",[a._v("apt-get install -y foo")]),a._v(" 就行，该指令会自动升级 "),s("code",[a._v("foo")]),a._v(" 包。")]),a._v(" "),s("p",[a._v("永远将 "),s("code",[a._v("RUN apt-get update")]),a._v(" 和 "),s("code",[a._v("apt-get install")]),a._v(" 组合成一条 "),s("code",[a._v("RUN")]),a._v(" 声明，例如：")]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("get update && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("y \\\n        package"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("bar \\\n        package"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("baz \\\n        package"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("foo\n")])])]),s("p",[a._v("将 "),s("code",[a._v("apt-get update")]),a._v(" 放在一条单独的 "),s("code",[a._v("RUN")]),a._v(" 声明中会导致缓存问题以及后续的 "),s("code",[a._v("apt-get install")]),a._v(" 失败。比如，假设你有一个 "),s("code",[a._v("Dockerfile")]),a._v(" 文件：")]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("FROM")]),a._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("14.04\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("get update\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("y curl\n")])])]),s("p",[a._v("构建镜像后，所有的层都在 Docker 的缓存中。假设你后来又修改了其中的 "),s("code",[a._v("apt-get install")]),a._v(" 添加了一个包：")]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("FROM")]),a._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("14.04\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("get update\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("y curl nginx\n")])])]),s("p",[a._v("Docker 发现修改后的 "),s("code",[a._v("RUN apt-get update")]),a._v(" 指令和之前的完全一样。所以，"),s("code",[a._v("apt-get update")]),a._v(" 不会执行，而是使用之前的缓存镜像。因为 "),s("code",[a._v("apt-get update")]),a._v(" 没有运行，后面的 "),s("code",[a._v("apt-get install")]),a._v(" 可能安装的是过时的 "),s("code",[a._v("curl")]),a._v(" 和 "),s("code",[a._v("nginx")]),a._v(" 版本。")]),a._v(" "),s("p",[a._v("使用 "),s("code",[a._v("RUN apt-get update && apt-get install -y")]),a._v(" 可以确保你的 Dockerfiles 每次安装的都是包的最新的版本，而且这个过程不需要进一步的编码或额外干预。这项技术叫作 "),s("code",[a._v("cache busting")]),a._v("。你也可以显示指定一个包的版本号来达到 "),s("code",[a._v("cache-busting")]),a._v("，这就是所谓的固定版本，例如：")]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("get update && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("y \\\n    package"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("bar \\\n    package"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("baz \\\n    package"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("foo=1.3.*\n")])])]),s("p",[a._v("固定版本会迫使构建过程检索特定的版本，而不管缓存中有什么。这项技术也可以减少因所需包中未预料到的变化而导致的失败。")]),a._v(" "),s("p",[a._v("下面是一个 "),s("code",[a._v("RUN")]),a._v(" 指令的示例模板，展示了所有关于 "),s("code",[a._v("apt-get")]),a._v(" 的建议。")]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("get update && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("y \\\n    aufs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("tools \\\n    automake \\\n    build"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("essential \\\n    curl \\\n    dpkg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("sig \\\n    libcap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("dev \\\n    libsqlite3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("dev \\\n    mercurial \\\n    reprepro \\\n    ruby1.9.1 \\\n    ruby1.9.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("dev \\\n    s3cmd=1.1.* \\\n && rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("rf /var/lib/apt/lists/*\n")])])]),s("p",[a._v("其中 "),s("code",[a._v("s3cmd")]),a._v(" 指令指定了一个版本号 "),s("code",[a._v("1.1.*")]),a._v("。如果之前的镜像使用的是更旧的版本，指定新的版本会导致 "),s("code",[a._v("apt-get udpate")]),a._v(" 缓存失效并确保安装的是新版本。")]),a._v(" "),s("p",[a._v("另外，清理掉 apt 缓存 "),s("code",[a._v("var/lib/apt/lists")]),a._v(" 可以减小镜像大小。因为 "),s("code",[a._v("RUN")]),a._v(" 指令的开头为 "),s("code",[a._v("apt-get udpate")]),a._v("，包缓存总是会在 "),s("code",[a._v("apt-get install")]),a._v(" 之前刷新。")]),a._v(" "),s("blockquote",[s("p",[a._v("注意：官方的 Debian 和 Ubuntu 镜像会自动运行 apt-get clean，所以不需要显式的调用 apt-get clean。")])]),a._v(" "),s("h5",{attrs:{id:"cmd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmd","aria-hidden":"true"}},[a._v("#")]),a._v(" CMD")]),a._v(" "),s("p",[s("code",[a._v("CMD")]),a._v(" 指令用于执行目标镜像中包含的软件，可以包含参数。"),s("code",[a._v("CMD")]),a._v(" 大多数情况下都应该以 "),s("code",[a._v('CMD ["executable", "param1", "param2"...]')]),a._v(" 的形式使用。因此，如果创建镜像的目的是为了部署某个服务(比如 "),s("code",[a._v("Apache")]),a._v(")，你可能会执行类似于 "),s("code",[a._v('CMD ["apache2", "-DFOREGROUND"]')]),a._v(" 形式的命令。我们建议任何服务镜像都使用这种形式的命令。")]),a._v(" "),s("p",[a._v("多数情况下，"),s("code",[a._v("CMD")]),a._v(" 都需要一个交互式的 "),s("code",[a._v("shell")]),a._v(" (bash, Python, perl 等)，例如 "),s("code",[a._v('CMD ["perl", "-de0"]')]),a._v("，或者 "),s("code",[a._v('CMD ["PHP", "-a"]')]),a._v("。使用这种形式意味着，当你执行类似 "),s("code",[a._v("docker run -it python")]),a._v("时，你会进入一个准备好的 "),s("code",[a._v("shell")]),a._v(" 中。"),s("code",[a._v("CMD")]),a._v(" 应该在极少的情况下才能以 "),s("code",[a._v('CMD ["param", "param"]')]),a._v("的形式与 "),s("code",[a._v("ENTRYPOINT")]),a._v(" 协同使用，除非你和你的镜像使用者都对 "),s("code",[a._v("ENTRYPOINT")]),a._v(" 的工作方式十分熟悉。")]),a._v(" "),s("h5",{attrs:{id:"expose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expose","aria-hidden":"true"}},[a._v("#")]),a._v(" EXPOSE")]),a._v(" "),s("p",[s("code",[a._v("EXPOSE")]),a._v(" 指令用于指定容器将要监听的端口。因此，你应该为你的应用程序使用常见的端口。例如，提供 "),s("code",[a._v("Apache")]),a._v(" web 服务的镜像应该使用 "),s("code",[a._v("EXPOSE 80")]),a._v("，而提供 "),s("code",[a._v("MongoDB")]),a._v(" 服务的镜像使用 "),s("code",[a._v("EXPOSE 27017")]),a._v("。")]),a._v(" "),s("p",[a._v("对于外部访问，用户可以在执行 "),s("code",[a._v("docker run")]),a._v(" 时使用一个标志来指示如何将指定的端口映射到所选择的端口。")]),a._v(" "),s("h5",{attrs:{id:"env"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#env","aria-hidden":"true"}},[a._v("#")]),a._v(" ENV")]),a._v(" "),s("p",[a._v("为了方便新程序运行，你可以使用 "),s("code",[a._v("ENV")]),a._v(" 来为容器中安装的程序更新 "),s("code",[a._v("PATH")]),a._v(" 环境变量。例如使用 "),s("code",[a._v("ENV PATH /usr/local/nginx/bin:$PATH")]),a._v(" 来确保 "),s("code",[a._v('CMD ["nginx"]')]),a._v(" 能正确运行。")]),a._v(" "),s("p",[s("code",[a._v("ENV")]),a._v(" 指令也可用于为你想要容器化的服务提供必要的环境变量，比如 Postgres 需要的 "),s("code",[a._v("PGDATA")]),a._v("。")]),a._v(" "),s("p",[a._v("最后，"),s("code",[a._v("ENV")]),a._v(" 也能用于设置常见的版本号，比如下面的示例：")]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" PG_MAJOR 9.3\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" PG_VERSION 9.3.4\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" curl "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("SL http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("//example.com/postgres"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("$PG_VERSION.tar.xz "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("|")]),a._v(" tar "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("xJC /usr/src/postgress && …\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" PATH /usr/local/postgres"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("$PG_MAJOR/bin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("$PATH\n")])])]),s("p",[a._v("类似于程序中的常量，这种方法可以让你只需改变 "),s("code",[a._v("ENV")]),a._v(" 指令来自动的改变容器中的软件版本。")]),a._v(" "),s("h5",{attrs:{id:"add-和-copy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#add-和-copy","aria-hidden":"true"}},[a._v("#")]),a._v(" ADD 和 COPY")]),a._v(" "),s("p",[a._v("虽然 "),s("code",[a._v("ADD")]),a._v(" 和 "),s("code",[a._v("COPY")]),a._v(" 功能类似，但一般优先使用 "),s("code",[a._v("COPY")]),a._v("。因为它比 "),s("code",[a._v("ADD")]),a._v(" 更透明。"),s("code",[a._v("COPY")]),a._v(" 只支持简单将本地文件拷贝到容器中，而 "),s("code",[a._v("ADD")]),a._v(" 有一些并不明显的功能（比如本地 tar 提取和远程 URL 支持）。因此，"),s("code",[a._v("ADD")]),a._v(" 的最佳用例是将本地 tar 文件自动提取到镜像中，例如 "),s("code",[a._v("ADD rootfs.tar.xz")]),a._v("。")]),a._v(" "),s("p",[a._v("如果你的 "),s("code",[a._v("Dockerfile")]),a._v(" 有多个步骤需要使用上下文中不同的文件。单独 "),s("code",[a._v("COPY")]),a._v(" 每个文件，而不是一次性的 "),s("code",[a._v("COPY")]),a._v(" 所有文件，这将保证每个步骤的构建缓存只在特定的文件变化时失效。例如：")]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("COPY")]),a._v(" requirements.txt /tmp/\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" pip install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("requirement /tmp/requirements.txt\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("COPY")]),a._v(" . /tmp/\n")])])]),s("p",[a._v("如果将 "),s("code",[a._v("COPY . /tmp/")]),a._v(" 放置在 "),s("code",[a._v("RUN")]),a._v(" 指令之前，只要 "),s("code",[a._v(".")]),a._v(" 目录中任何一个文件变化，都会导致后续指令的缓存失效。")]),a._v(" "),s("p",[a._v("为了让镜像尽量小，最好不要使用 "),s("code",[a._v("ADD")]),a._v(" 指令从远程 URL 获取包，而是使用 "),s("code",[a._v("curl")]),a._v(" 和 "),s("code",[a._v("wget")]),a._v("。这样你可以在文件提取完之后删掉不再需要的文件来避免在镜像中额外添加一层。比如尽量避免下面的用法：")]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ADD")]),a._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("//example.com/big.tar.xz /usr/src/things/\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" tar "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("xJf /usr/src/things/big.tar.xz "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("C /usr/src/things\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" make "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("C /usr/src/things all\n")])])]),s("p",[a._v("而是应该使用下面这种方法：")]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" mkdir "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("p /usr/src/things \\\n    && curl "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("SL http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("//example.com/big.tar.xz \\\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("|")]),a._v(" tar "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("xJC /usr/src/things \\\n    && make "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("C /usr/src/things all\n")])])]),s("p",[a._v("上面使用的管道操作，所以没有中间文件需要删除。")]),a._v(" "),s("p",[a._v("对于其他不需要 "),s("code",[a._v("ADD")]),a._v(" 的自动提取功能的文件或目录，你应该使用 "),s("code",[a._v("COPY")]),a._v("。")]),a._v(" "),s("h5",{attrs:{id:"entrypoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint","aria-hidden":"true"}},[a._v("#")]),a._v(" ENTRYPOINT")]),a._v(" "),s("p",[s("code",[a._v("ENTRYPOINT")]),a._v(" 的最佳用处是设置镜像的主命令，允许将镜像当成命令本身来运行（用 "),s("code",[a._v("CMD")]),a._v(" 提供默认选项）。")]),a._v(" "),s("p",[a._v("例如，下面的示例镜像提供了命令行工具 "),s("code",[a._v("s3cmd")]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENTRYPOINT")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"s3cmd"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("CMD")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"--help"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("现在直接运行该镜像创建的容器会显示命令帮助：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker run s3cmd\n")])])]),s("p",[a._v("或者提供正确的参数来执行某个命令：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker run s3cmd "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" s3://mybucket\n")])])]),s("p",[a._v("这样镜像名可以当成命令行的参考。")]),a._v(" "),s("p",[s("code",[a._v("ENTRYPOINT")]),a._v(" 指令也可以结合一个辅助脚本使用，和前面命令行风格类似，即使启动工具需要不止一个步骤。")]),a._v(" "),s("p",[a._v("例如，"),s("code",[a._v("Postgres")]),a._v(" 官方镜像使用下面的脚本作为 "),s("code",[a._v("ENTRYPOINT")]),a._v("：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("set")]),a._v(" -e\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v('"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'postgres'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("chown")]),a._v(" -R postgres "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$PGDATA")]),a._v('"')]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" -z "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -A "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$PGDATA")]),a._v('"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v('"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n        gosu postgres initdb\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),a._v(" gosu postgres "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$@")]),a._v('"')]),a._v("\n")])])]),s("blockquote",[s("p",[a._v("注意：该脚本使用了 Bash 的内置命令 exec，所以最后运行的进程就是容器的 PID 为 1 的进程。这样，进程就可以接收到任何发送给容器的 Unix 信号了。")])]),a._v(" "),s("p",[a._v("该辅助脚本被拷贝到容器，并在容器启动时通过 "),s("code",[a._v("ENTRYPOINT")]),a._v(" 执行：")]),a._v(" "),s("div",{staticClass:"language-docker extra-class"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("COPY")]),a._v(" ./docker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v("entrypoint.sh /\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENTRYPOINT")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/docker-entrypoint.sh"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("该脚本可以让用户用几种不同的方式和 "),s("code",[a._v("Postgres")]),a._v(" 交互。")]),a._v(" "),s("p",[a._v("你可以很简单地启动 "),s("code",[a._v("Postgres")]),a._v("：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker run postgres\n")])])]),s("p",[a._v("也可以执行 "),s("code",[a._v("Postgres")]),a._v(" 并传递参数：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker run postgres postgres --help\n")])])]),s("p",[a._v("最后，你还可以启动另外一个完全不同的工具，比如 "),s("code",[a._v("Bash")]),a._v("：")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ docker run --rm -it postgres "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n")])])]),s("h5",{attrs:{id:"volume"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volume","aria-hidden":"true"}},[a._v("#")]),a._v(" VOLUME")]),a._v(" "),s("p",[s("code",[a._v("VOLUME")]),a._v(" 指令用于暴露任何数据库存储文件，配置文件，或容器创建的文件和目录。强烈建议使用 "),s("code",[a._v("VOLUME")]),a._v(" 来管理镜像中的可变部分和用户可以改变的部分。")]),a._v(" "),s("h5",{attrs:{id:"user"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#user","aria-hidden":"true"}},[a._v("#")]),a._v(" USER")]),a._v(" "),s("p",[a._v("如果某个服务不需要特权执行，建议使用 "),s("code",[a._v("USER")]),a._v(" 指令切换到非 root 用户。先在 "),s("code",[a._v("Dockerfile")]),a._v(" 中使用类似 "),s("code",[a._v("RUN groupadd -r postgres && useradd -r -g postgres postgres")]),a._v(" 的指令创建用户和用户组。")]),a._v(" "),s("blockquote",[s("p",[a._v("注意：在镜像中，用户和用户组每次被分配的 UID/GID 都是不确定的，下次重新构建镜像时被分配到的 UID/GID 可能会不一样。如果要依赖确定的 UID/GID，你应该显示的指定一个 UID/GID。")])]),a._v(" "),s("p",[a._v("你应该避免使用 "),s("code",[a._v("sudo")]),a._v("，因为它不可预期的 TTY 和信号转发行为可能造成的问题比它能解决的问题还多。如果你真的需要和 "),s("code",[a._v("sudo")]),a._v(" 类似的功能（例如，以 root 权限初始化某个守护进程，以非 root 权限执行它），你可以使用 "),s("a",{attrs:{href:"https://github.com/tianon/gosu",target:"_blank",rel:"noopener noreferrer"}},[a._v("gosu"),s("OutboundLink")],1),a._v("。")]),a._v(" "),s("p",[a._v("最后，为了减少层数和复杂度，避免频繁地使用 "),s("code",[a._v("USER")]),a._v(" 来回切换用户。")]),a._v(" "),s("h5",{attrs:{id:"workdir"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#workdir","aria-hidden":"true"}},[a._v("#")]),a._v(" WORKDIR")]),a._v(" "),s("p",[a._v("为了清晰性和可靠性，你应该总是在 "),s("code",[a._v("WORKDIR")]),a._v(" 中使用绝对路径。另外，你应该使用 "),s("code",[a._v("WORKDIR")]),a._v(" 来替代类似于 "),s("code",[a._v("RUN cd ... && do-something")]),a._v(" 的指令，后者难以阅读、排错和维护。")]),a._v(" "),s("h5",{attrs:{id:"官方仓库示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#官方仓库示例","aria-hidden":"true"}},[a._v("#")]),a._v(" 官方仓库示例")]),a._v(" "),s("p",[a._v("这些官方仓库的 Dockerfile 都是参考典范：https://github.com/docker-library/docs")])])},[],!1,null,null,null);t.default=r.exports}}]);