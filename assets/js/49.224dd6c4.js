(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{231:function(t,e,l){"use strict";l.r(e);var a=l(0),v=Object(a.a)({},function(){var t=this,e=t.$createElement,l=t._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h1",{attrs:{id:"命令"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#命令","aria-hidden":"true"}},[t._v("#")]),t._v(" 命令")]),t._v(" "),l("h2",{attrs:{id:"键"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#键","aria-hidden":"true"}},[t._v("#")]),t._v(" 键")]),t._v(" "),l("p",[t._v("下表给出了与 Redis 键相关的基本命令：")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("命令及描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("DEL key")]),t._v(" 该命令用于在 key 存在时删除 key。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("DUMP key")]),t._v(" 序列化给定 key ，并返回被序列化的值。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("EXISTS key")]),t._v("  检查给定 key 是否存在。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("EXPIRE key seconds")]),t._v(" 为给定 key 设置过期时间。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("EXPIREAT key timestamp")]),t._v("  EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("PEXPIRE key milliseconds")]),t._v("  设置 key 的过期时间亿以毫秒计。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("PEXPIREAT key milliseconds-timestamp")]),t._v(" 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("KEYS pattern")]),t._v("  查找所有符合给定模式( pattern)的 key 。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("MOVE key db")]),t._v("  将当前数据库的 key 移动到给定的数据库 db 当中。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("PERSIST key")]),t._v(" 移除 key 的过期时间，key 将持久保持。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("PTTL key")]),t._v("  以毫秒为单位返回 key 的剩余的过期时间。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("TTL key")]),t._v(" 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("13")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("RANDOMKEY")]),t._v(" 从当前数据库中随机返回一个 key 。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("14")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("RENAME key newkey")]),t._v("  修改 key 的名称")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("15")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("RENAMENX key newkey")]),t._v(" 仅当 newkey 不存在时，将 key 改名为 newkey 。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("16")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("TYPE key")]),t._v(" 返回 key 所储存的值的类型。")])])])]),t._v(" "),l("h2",{attrs:{id:"字符串"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#字符串","aria-hidden":"true"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),l("p",[t._v("下表列出了常用的 redis 字符串命令：")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("命令及描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SET key value")]),t._v(" 设置指定 key 的值")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("GET key")]),t._v(" 获取指定 key 的值。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("GETRANGE key start end")]),t._v("  返回 key 中字符串值的子字符")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("GETSET key value")]),t._v(" 将给定 key 的值设为 value ，并返回 key 的旧值(old value)。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("GETBIT key offset")]),t._v(" 对 key 所储存的字符串值，获取指定偏移量上的位(bit)。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("MGET key1 [key2..]")]),t._v("获取所有(一个或多个)给定 key 的值。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SETBIT key offset value")]),t._v("对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SETEX key seconds value")]),t._v(" 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SETNX key value")]),t._v("只有在 key 不存在时设置 key 的值。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SETRANGE key offset value")]),t._v("用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("STRLEN key")]),t._v(" 返回 key 所储存的字符串值的长度。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("MSET key value [key value …]")]),t._v(" 同时设置一个或多个 key-value 对。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("13")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("MSETNX key value [key value …]")]),t._v(" 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("14")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("PSETEX key milliseconds value")]),t._v(" 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("15")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("INCR key")]),t._v("将 key 中储存的数字值增一。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("16")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("INCRBY key increment")]),t._v("将 key 所储存的值加上给定的增量值（increment） 。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("17")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("INCRBYFLOAT key increment")]),t._v(" 将 key 所储存的值加上给定的浮点增量值（increment） 。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("18")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("DECR key")]),t._v(" 将 key 中储存的数字值减一。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("19")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("DECRBY key decrement key")]),t._v(" 所储存的值减去给定的减量值（decrement） 。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("20")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("APPEND key value")]),t._v("如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。")])])])]),t._v(" "),l("h2",{attrs:{id:"哈希"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#哈希","aria-hidden":"true"}},[t._v("#")]),t._v(" 哈希")]),t._v(" "),l("p",[t._v("下表列出了 redis hash 基本的相关命令：")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("命令及描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HDEL key field2 [field2]")]),t._v("删除一个或多个哈希表字段")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HEXISTS key field")]),t._v(" 查看哈希表 key 中，指定的字段是否存在。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HGET key field")]),t._v(" 获取存储在哈希表中指定字段的值")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HGETALL key")]),t._v("  获取在哈希表中指定 key 的所有字段和值")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HINCRBY key field increment")]),t._v("为哈希表 key 中的指定字段的整数值加上增量 increment 。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HINCRBYFLOAT key field increment")]),t._v("为哈希表 key 中的指定字段的浮点数值加上增量 increment 。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HKEYS key")]),t._v("  获取所有哈希表中的字段")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HLEN key")]),t._v(" 获取哈希表中字段的数量")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HMGET key field1 [field2]")]),t._v(" 获取所有给定字段的值")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HMSET key field1 value1 [field2 value2 ]")]),t._v("同时将多个 field-value (域-值)对设置到哈希表 key 中。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HSET key field value")]),t._v(" 将哈希表 key 中的字段 field 的值设为 value 。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HSETNX key field value")]),t._v(" 只有在字段 field 不存在时，设置哈希表字段的值。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("13")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HVALS key")]),t._v(" 获取哈希表中所有值")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("14")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("HSCAN key cursor [MATCH pattern] [COUNT count]")]),t._v("  迭代哈希表中的键值对。")])])])]),t._v(" "),l("h2",{attrs:{id:"列表"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#列表","aria-hidden":"true"}},[t._v("#")]),t._v(" 列表")]),t._v(" "),l("p",[t._v("下表列出了列表相关的基本命令：")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("命令及描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("BLPOP key1 [key2 ] timeout")]),t._v("  移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("BRPOP key1 [key2 ] timeout")]),t._v("  移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("BRPOPLPUSH source destination timeout")]),t._v("  从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("LINDEX key index")]),t._v(" 通过索引获取列表中的元素")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("LINSERT key BEFORE|AFTER pivot value")]),t._v(" 在列表的元素前或者后插入元素")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("LLEN key")]),t._v("  获取列表长度")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("LPOP key")]),t._v("  移出并获取列表的第一个元素")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("LPUSH key value1 [value2]")]),t._v(" 将一个或多个值插入到列表头部")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("LPUSHX key value")]),t._v("  将一个或多个值插入到已存在的列表头部")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("LRANGE key start stop")]),t._v("  获取列表指定范围内的元素")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("LREM key count value")]),t._v("移除列表元素")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("LSET key index value")]),t._v("  通过索引设置列表元素的值")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("13")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("LTRIM key start stop")]),t._v(" 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("14")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("RPOP key")]),t._v("移除并获取列表最后一个元素")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("15")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("RPOPLPUSH source destination")]),t._v(" 移除列表的最后一个元素，并将该元素添加到另一个列表并返回")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("16")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("RPUSH key value1 [value2]")]),t._v(" 在列表中添加一个或多个值")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("17")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("RPUSHX key value")]),t._v(" 为已存在的列表添加值")])])])]),t._v(" "),l("h2",{attrs:{id:"集合"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#集合","aria-hidden":"true"}},[t._v("#")]),t._v(" 集合")]),t._v(" "),l("p",[t._v("下表列出了 Redis 集合基本命令：")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("命令及描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SADD key member1 member2")]),t._v(" 向集合添加一个或多个成员")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SCARD key")]),t._v("  获取集合的成员数")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SDIFF key1 [key2]")]),t._v("  返回给定所有集合的差集")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SDIFFSTORE destination key1 key2")]),t._v(" 返回给定所有集合的差集并存储在 destination 中")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SINTER key1 key2")]),t._v("  返回给定所有集合的交集")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SINTERSTORE destination key1 key2")]),t._v("  返回给定所有集合的交集并存储在 destination 中")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SISMEMBER key member")]),t._v("  判断 member 元素是否是集合 key 的成员")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SMEMBERS key")]),t._v("  返回集合中的所有成员")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SMOVE source destination member")]),t._v("  将 member 元素从 source 集合移动到 destination 集合")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SPOP key")]),t._v("  移除并返回集合中的一个随机元素")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SRANDMEMBER key count")]),t._v("  返回集合中一个或多个随机数")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SREM key member1 member2")]),t._v("  移除集合中一个或多个成员")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("13")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SUNION key1 key2")]),t._v("  返回所有给定集合的并集")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("14")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SUNIONSTORE destination key1 key2")]),t._v("  所有给定集合的并集存储在 destination 集合中")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("15")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SSCAN key cursor [MATCH pattern] [COUNT count]")]),t._v("  迭代集合中的元素")])])])]),t._v(" "),l("h2",{attrs:{id:"有序集合"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#有序集合","aria-hidden":"true"}},[t._v("#")]),t._v(" 有序集合")]),t._v(" "),l("p",[t._v("下表列出了 redis 有序集合的基本命令:")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("命令及描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZADD key score1 member1 [score2 member2]")]),t._v("  向有序集合添加一个或多个成员，或者更新已存在成员的分数")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZCARD key")]),t._v("  获取有序集合的成员数")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZCOUNT key min max")]),t._v("  计算在有序集合中指定区间分数的成员数")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZINCRBY key increment member")]),t._v("  有序集合中对指定成员的分数加上增量 increment")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZINTERSTORE destination numkeys key [key …]")]),t._v("  计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZLEXCOUNT key min max")]),t._v("  在有序集合中计算指定字典区间内成员数量")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZRANGE key start stop [WITHSCORES]")]),t._v("  通过索引区间返回有序集合成指定区间内的成员")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZRANGEBYLEX key min max LIMIT offset count")]),t._v("  通过字典区间返回有序集合的成员")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]")]),t._v("  通过分数返回有序集合指定区间内的成员")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZRANK key member")]),t._v("  返回有序集合中指定成员的索引")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZREM key member member …")]),t._v("  移除有序集合中的一个或多个成员")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZREMRANGEBYLEX key min max")]),t._v("  移除有序集合中给定的字典区间的所有成员")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("13")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZREMRANGEBYRANK key start stop")]),t._v("  移除有序集合中给定的排名区间的所有成员")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("14")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZREMRANGEBYSCORE key min max")]),t._v("  移除有序集合中给定的分数区间的所有成员")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("15")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZREVRANGE key start stop [WITHSCORES]")]),t._v("  返回有序集中指定区间内的成员，通过索引，分数从高到底")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("16")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZREVRANGEBYSCORE key max min WITHSCORES")]),t._v(" 返回有序集中指定分数区间内的成员，分数从高到低排序")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("17")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZREVRANK key member")]),t._v("  返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("18")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZSCORE key member")]),t._v("  返回有序集中，成员的分数值")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("19")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZUNIONSTORE destination numkeys key key …")]),t._v("  计算给定的一个或多个有序集的并集，并存储在新的 key 中")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("20")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("ZSCAN key cursor [MATCH pattern] [COUNT count]")]),t._v(" 迭代有序集合中的元素（包括元素成员和元素分值）")])])])]),t._v(" "),l("h2",{attrs:{id:"hyperloglog"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#hyperloglog","aria-hidden":"true"}},[t._v("#")]),t._v(" HyperLogLog")]),t._v(" "),l("p",[t._v("Redis 在 2.8.9 版本添加了 HyperLogLog 结构。")]),t._v(" "),l("p",[t._v("Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。")]),t._v(" "),l("p",[t._v("在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。")]),t._v(" "),l("p",[t._v("但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。")]),t._v(" "),l("h3",{attrs:{id:"什么是基数"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#什么是基数","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是基数?")]),t._v(" "),l("p",[t._v("比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。")]),t._v(" "),l("p",[t._v("下表列出了 redis HyperLogLog 的基本命令：")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("命令及描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("PFADD key element element ..")]),t._v("  添加指定元素到 HyperLogLog 中。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("PFCOUNT key key ...")]),t._v(" 返回给定 HyperLogLog 的基数估算值。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("PFMERGE destkey sourcekey sourcekey …")]),t._v("  将多个 HyperLogLog 合并为一个 HyperLogLog")])])])]),t._v(" "),l("h2",{attrs:{id:"发布订阅"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅","aria-hidden":"true"}},[t._v("#")]),t._v(" 发布订阅")]),t._v(" "),l("p",[t._v("Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。")]),t._v(" "),l("p",[t._v("Redis 客户端可以订阅任意数量的频道。")]),t._v(" "),l("p",[t._v("下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：")]),t._v(" "),l("p",[l("img",{attrs:{src:"http://ww1.sinaimg.cn/large/006tNc79gy1g5a6y2nq3ej308v05i0sn.jpg",alt:"img"}})]),t._v(" "),l("p",[l("img",{attrs:{src:"http://ww4.sinaimg.cn/large/006tNc79gy1g5a6y1uxgaj308v05i0sn.jpg",alt:"pubsub1"}})]),t._v(" "),l("p",[t._v("当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：")]),t._v(" "),l("p",[l("img",{attrs:{src:"http://ww2.sinaimg.cn/large/006tNc79gy1g5a6y36d86j308r07xdfu.jpg",alt:"img"}})]),t._v(" "),l("p",[t._v("下表列出了 redis 发布订阅常用命令：")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("命令及描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("PSUBSCRIBE pattern pattern …")]),t._v("  订阅一个或多个符合给定模式的频道。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("PUBSUB subcommand [argument [argument …]]")]),t._v("  查看订阅与发布系统状态。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("PUBLISH channel message")]),t._v("  将信息发送到指定的频道。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("PUNSUBSCRIBE [pattern [pattern ...]]")]),t._v(" 退订所有给定模式的频道。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SUBSCRIBE channel [channel …]")]),t._v("  订阅给定的一个或多个频道的信息。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("UNSUBSCRIBE [channel [channel …]]")]),t._v("  指退订给定的频道。")])])])]),t._v(" "),l("h2",{attrs:{id:"事务"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#事务","aria-hidden":"true"}},[t._v("#")]),t._v(" 事务")]),t._v(" "),l("p",[t._v("Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：")]),t._v(" "),l("ul",[l("li",[t._v("事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。")]),t._v(" "),l("li",[t._v("事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。")])]),t._v(" "),l("p",[t._v("一个事务从开始到执行会经历以下三个阶段：")]),t._v(" "),l("ul",[l("li",[t._v("开始事务。")]),t._v(" "),l("li",[t._v("命令入队。")]),t._v(" "),l("li",[t._v("执行事务。")])]),t._v(" "),l("p",[t._v("以下是一个事务的例子， 它先以 "),l("strong",[t._v("MULTI")]),t._v(" 开始一个事务， 然后将多个命令入队到事务中， 最后由 "),l("strong",[t._v("EXEC")]),t._v(" 命令触发事务， 一并执行事务中的所有命令：")]),t._v(" "),l("div",{staticClass:"language-bash extra-class"},[l("pre",{pre:!0,attrs:{class:"language-bash"}},[l("code",[t._v("redis 127.0.0.1:6379"),l("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" MULTI\nOK\n\nredis 127.0.0.1:6379"),l("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SET book-name "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mastering C++ in 21 days"')]),t._v("\nQUEUED\n\nredis 127.0.0.1:6379"),l("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" GET book-name\nQUEUED\n\nredis 127.0.0.1:6379"),l("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD tag "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C++"')]),t._v(" "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Programming"')]),t._v(" "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mastering Series"')]),t._v("\nQUEUED\n\nredis 127.0.0.1:6379"),l("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SMEMBERS tag\nQUEUED\n\nredis 127.0.0.1:6379"),l("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" EXEC\n1"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" OK\n2"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mastering C++ in 21 days"')]),t._v("\n3"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 3\n4"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mastering Series"')]),t._v("\n   2"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C++"')]),t._v("\n   3"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),l("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Programming"')]),t._v("\n")])])]),l("p",[t._v("下表列出了 redis 事务的相关命令：")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("命令及描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("DISCARD")]),t._v("  取消事务，放弃执行事务块内的所有命令。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("EXEC")]),t._v("  执行所有事务块内的命令。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("MULTI")]),t._v("  标记一个事务块的开始。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("UNWATCH")]),t._v("  取消 WATCH 命令对所有 key 的监视。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("WATCH key key ...")]),t._v(" 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。")])])])]),t._v(" "),l("h2",{attrs:{id:"脚本"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#脚本","aria-hidden":"true"}},[t._v("#")]),t._v(" 脚本")]),t._v(" "),l("p",[t._v("Redis 脚本使用 Lua 解释器来执行脚本。 Reids 2.6 版本通过内嵌支持 Lua 环境。执行脚本的常用命令为 "),l("strong",[t._v("EVAL")]),t._v("。")]),t._v(" "),l("p",[t._v("下表列出了 redis 脚本常用命令：")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("命令及描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("EVAL script numkeys key [key ...] arg [arg …]")]),t._v("  执行 Lua 脚本。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("EVALSHA sha1 numkeys key [key ...] arg [arg …]")]),t._v("  执行 Lua 脚本。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SCRIPT EXISTS script [script …]")]),t._v("  查看指定的脚本是否已经被保存在缓存当中。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SCRIPT FLUSH")]),t._v("  从脚本缓存中移除所有脚本。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SCRIPT KILL")]),t._v("  杀死当前正在运行的 Lua 脚本。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("code",[t._v("SCRIPT LOAD script")]),t._v(" 将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。")])])])]),t._v(" "),l("h2",{attrs:{id:"连接"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#连接","aria-hidden":"true"}},[t._v("#")]),t._v(" 连接")]),t._v(" "),l("p",[t._v("下表列出了 redis 连接的基本命令：")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("命令及描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("AUTH password  验证密码是否正确")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("ECHO message  打印字符串")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("PING  查看服务是否运行")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("QUIT  关闭当前连接")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("SELECT index  切换到指定的数据库")])])])]),t._v(" "),l("h2",{attrs:{id:"服务器"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#服务器","aria-hidden":"true"}},[t._v("#")]),t._v(" 服务器")]),t._v(" "),l("p",[t._v("下表列出了 redis 服务器的相关命令:")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("命令及描述")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("a",{attrs:{href:"https://www.w3cschool.cn/redis/server-bgrewriteaof.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("BGREWRITEAOF"),l("OutboundLink")],1),t._v("  异步执行一个 AOF（AppendOnly File） 文件重写操作")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("a",{attrs:{href:"https://www.w3cschool.cn/redis/server-bgsave.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("BGSAVE"),l("OutboundLink")],1),t._v("  在后台异步保存当前数据库的数据到磁盘")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("CLIENT KILL [ip:port] [ID client-id]  关闭客户端连接")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("CLIENT LIST  获取连接到服务器的客户端连接列表")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("CLIENT GETNAME  获取连接的名称")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("CLIENT PAUSE timeout  在指定时间内终止运行来自客户端的命令")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("7")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("CLIENT SETNAME connection-name  设置当前连接的名称")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("CLUSTER SLOTS  获取集群节点的映射数组")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("9")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("COMMAND  获取 Redis 命令详情数组")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("COMMAND COUNT  获取 Redis 命令总数")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("COMMAND GETKEYS  获取给定命令的所有键")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("TIME  返回当前服务器时间")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("13")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("COMMAND INFO command-name [command-name ...]  获取指定 Redis 命令描述的数组")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("14")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("CONFIG GET parameter  获取指定配置参数的值")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("15")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("CONFIG REWRITE  对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("16")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("CONFIG SET parameter value  修改 redis 配置参数，无需重启")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("17")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("CONFIG RESETSTAT  重置 INFO 命令中的某些统计数据")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("18")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("DBSIZE  返回当前数据库的 key 的数量")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("19")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("DEBUG OBJECT key  获取 key 的调试信息")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("20")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("DEBUG SEGFAULT  让 Redis 服务崩溃")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("21")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("FLUSHALL  删除所有数据库的所有key")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("22")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("FLUSHDB  删除当前数据库的所有key")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("23")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("[INFO section]  获取 Redis 服务器的各种信息和统计数值")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("24")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("LASTSAVE  返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("25")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("MONITOR  实时打印出 Redis 服务器接收到的命令，调试用")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("26")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("ROLE  返回主从实例所属的角色")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("27")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("SAVE  异步保存数据到硬盘")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("28")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("SHUTDOWN [NOSAVE] [SAVE]  异步保存数据到硬盘，并关闭服务器")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("29")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("SLAVEOF host port  将当前服务器转变为指定服务器的从属服务器(slave server)")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("30")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("[SLOWLOG subcommand argument]  管理 redis 的慢日志")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("31")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("SYNC  用于复制功能(replication)的内部命令")])])])])])},[],!1,null,null,null);e.default=v.exports}}]);