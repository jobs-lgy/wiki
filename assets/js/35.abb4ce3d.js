(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{216:function(v,_,t){"use strict";t.r(_);var e=t(0),i=Object(e.a)({},function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库","aria-hidden":"true"}},[v._v("#")]),v._v(" 数据库")]),v._v(" "),t("h2",{attrs:{id:"mysql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql","aria-hidden":"true"}},[v._v("#")]),v._v(" "),t("strong",[v._v("MYSQL")])]),v._v(" "),t("p",[v._v("MySQL优化：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("表关联查询时务必遵循 "),t("strong",[v._v("小表驱动大表")]),v._v(" 原则；")])]),v._v(" "),t("li",[t("p",[v._v("使用查询语句 "),t("code",[v._v("where")]),v._v(" 条件时，不允许出现 "),t("strong",[v._v("函数")]),v._v("，否则索引会失效；")])]),v._v(" "),t("li",[t("p",[v._v("使用单表查询时，相同字段尽量不要用 "),t("code",[v._v("OR")]),v._v("，因为可能导致索引失效，比如："),t("code",[v._v("SELECT * FROM table WHERE name = '手机' OR name = '电脑'")]),v._v("，可以使用 "),t("code",[v._v("UNION")]),v._v(" 替代；")])]),v._v(" "),t("li",[t("p",[t("code",[v._v("LIKE")]),v._v(" 语句不允许使用 "),t("code",[v._v("%")]),v._v(" 开头，否则索引会失效；")])]),v._v(" "),t("li",[t("p",[v._v("组合索引一定要遵循 "),t("strong",[v._v("从左到右")]),v._v(" 原则，否则索引会失效；比如："),t("code",[v._v("SELECT * FROM table WHERE name = '张三' AND age = 18")]),v._v("，那么该组合索引必须是 "),t("code",[v._v("name,age")]),v._v(" 形式；")])]),v._v(" "),t("li",[t("p",[v._v("索引不宜过多，根据实际情况决定，尽量不要超过 10 个；")])]),v._v(" "),t("li",[t("p",[v._v("每张表都必须有 "),t("strong",[v._v("主键")]),v._v("，达到加快查询效率的目的；")])]),v._v(" "),t("li",[t("p",[v._v("分表，可根据业务字段尾数中的个位或十位或百位（以此类推）做表名达到分表的目的；")])]),v._v(" "),t("li",[t("p",[v._v("分库，可根据业务字段尾数中的个位或十位或百位（以此类推）做库名达到分库的目的；")])]),v._v(" "),t("li",[t("p",[v._v("表分区，类似于硬盘分区，可以将某个时间段的数据放在分区里，加快查询速度，可以配合 "),t("strong",[v._v("分表 + 表分区")]),v._v(" 结合使用；")])]),v._v(" "),t("li",[t("p",[v._v("MySQL 索引使用的注意事项")]),v._v(" "),t("p",[v._v("1.索引不会包含有NULL的列")]),v._v(" "),t("p",[v._v("​       只要列中包含有NULL值，都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此符合索引就是无效的。")]),v._v(" "),t("p",[v._v("2.使用短索引")]),v._v(" "),t("p",[v._v("​       对串列进行索引，如果可以就应该指定一个前缀长度。例如，如果有一个char（255）的列，如果在前10个或20个字符内，多数值是唯一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。")]),v._v(" "),t("p",[v._v("3.索引列排序")]),v._v(" "),t("p",[v._v("​       mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作，尽量不要包含多个列的排序，如果需要最好给这些列建复合索引。")]),v._v(" "),t("p",[v._v("4.like语句操作")]),v._v(" "),t("p",[v._v("​      一般情况下不鼓励使用like操作，如果非使用不可，注意正确的使用方式。like ‘%aaa%’不会使用索引，而like ‘aaa%’可以使用索引。")]),v._v(" "),t("p",[v._v("5.不要在列上进行运算")]),v._v(" "),t("p",[v._v("6.不使用NOT IN 、<>、！=操作，但<,<=，=，>,>=,BETWEEN,IN是可以用到索引的")]),v._v(" "),t("p",[v._v("7.索引要建立在经常进行select操作的字段上。")]),v._v(" "),t("p",[v._v("​       这是因为，如果这些列很少用到，那么有无索引并不能明显改变查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。")]),v._v(" "),t("p",[v._v("8.索引要建立在值比较唯一的字段上。")]),v._v(" "),t("p",[v._v("9.对于那些定义为text、image和bit数据类型的列不应该增加索引。因为这些列的数据量要么相当大，要么取值很少。")]),v._v(" "),t("p",[v._v("10.在where和join中出现的列需要建立索引。")]),v._v(" "),t("p",[v._v("11.where的查询条件里有不等号(where column != …),mysql将无法使用索引。")]),v._v(" "),t("p",[v._v("12.如果where字句的查询条件里使用了函数(如：where DAY(column)=…),mysql将无法使用索引。")]),v._v(" "),t("p",[v._v("13.在join操作中(需要从多个数据表提取数据时)，mysql只有在"),t("strong",[v._v("主键和外键的数据类型相同")]),v._v("时才能使用索引，否则及时建立了索引也不会使用。")])]),v._v(" "),t("li",[t("p",[v._v("DDL、DML、DCL分别指什么")]),v._v(" "),t("p",[v._v("DDL(data definition language)数据定义语言，就是我们在创建表时用到的一些SQL语句。例如：CREATE、ALTER、DROP等。DDL主要是用在定义表或者改变表的结构、数据类型、表之间的链接和约束等初始化操作上。")]),v._v(" "),t("p",[v._v("DML(data manipulation language) 数据操纵语言，就是我们经常用到的SELECT、UPDATE、INSERT、DELETE。主要用来对数据库的数据进行的一些操作。")]),v._v(" "),t("p",[v._v("DCL(Data Control Language)数据控制语言用来设置或者更改数据库用户角色权限等的语句，例如：grant、revoke语句。")])]),v._v(" "),t("li",[t("p",[v._v("explain命令")])]),v._v(" "),t("li",[t("p",[v._v("left join，right join，inner join")]),v._v(" "),t("p",[t("strong",[v._v("left join(左联接)")]),v._v(" 返回包括左表中的所有记录和右表中联结字段相等的记录\n"),t("strong",[v._v("right join(右联接)")]),v._v(" 返回包括右表中的所有记录和左表中联结字段相等的记录\n"),t("strong",[v._v("inner join(等值连接)")]),v._v(" 只返回两个表中联结字段相等的行")])]),v._v(" "),t("li",[t("p",[v._v("数据库事物ACID")])])]),v._v(" "),t("p",[v._v("A：(Atomicity) 原子性，一个事务是一个不可分割的单位，事务中的所有操作，要么全完成，要么全不完成，任何一个操作的失败，都会回滚到事务执行之前的状态。")]),v._v(" "),t("p",[v._v("C：Consistentcy 事务结束后，系统状态是一致的。即，在并发操作时，系统的状态也要和串行执行事务时一样。")]),v._v(" "),t("p",[v._v("I：Isolation 隔离性，并发执行的事务之间，无法看到彼此的系统状态。")]),v._v(" "),t("p",[v._v("D：Durability 持久性，在事务完成后，事务对数据库的操作会被持久保存在数据库中，不会被回滚。")]),v._v(" "),t("ul",[t("li",[v._v("事物的隔离级别（读未提交、读以提交、可重复读、可序列化读）")])]),v._v(" "),t("p",[v._v("脏读是当前事务看到其他事务未提交的数据。")]),v._v(" "),t("p",[v._v("不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。")]),v._v(" "),t("p",[v._v("幻读的侧重点在于新增和删除，表示在同一个事务中，使用相同的查询，第二次查询时，莫名的多出了一条记录或者是少了一条记录。")]),v._v(" "),t("p",[v._v("事务的隔离级别有4个，由低到高分别为：")]),v._v(" "),t("p",[v._v("Read uncommited ，")]),v._v(" "),t("p",[v._v("Read commited ，")]),v._v(" "),t("p",[v._v("Reapeatable Read ，")]),v._v(" "),t("p",[v._v("Serializable")]),v._v(" "),t("p",[v._v("他们分别可以解决以上在并发访问数据库时所产生的脏读，不可重复读，幻读等线程安全问题。\n✔️表示允许，❌表示不允许")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("隔离级别")]),v._v(" "),t("th",[v._v("脏读")]),v._v(" "),t("th",[v._v("不可重复读")]),v._v(" "),t("th",[v._v("幻读")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("Read uncommited")]),v._v(" "),t("td",[v._v("✔️")]),v._v(" "),t("td",[v._v("✔️")]),v._v(" "),t("td",[v._v("✔️")])]),v._v(" "),t("tr",[t("td",[v._v("Read commited")]),v._v(" "),t("td",[v._v("❌")]),v._v(" "),t("td",[v._v("✔️")]),v._v(" "),t("td",[v._v("✔️")])]),v._v(" "),t("tr",[t("td",[v._v("Reapeatable Read")]),v._v(" "),t("td",[v._v("❌")]),v._v(" "),t("td",[v._v("❌")]),v._v(" "),t("td",[v._v("✔️")])]),v._v(" "),t("tr",[t("td",[v._v("Serializable")]),v._v(" "),t("td",[v._v("❌")]),v._v(" "),t("td",[v._v("❌")]),v._v(" "),t("td",[v._v("❌")])])])]),v._v(" "),t("p",[v._v("​    注：Serializable是最高的隔离级别，可以全部避免脏读，不可重复读，幻读等问题，但效率偏低，花费较大，一般不使用。")]),v._v(" "),t("ul",[t("li",[v._v("数据库的几大范式")])]),v._v(" "),t("p",[v._v("第一范式是所有属性都不能在分解为更基本的数据单位")]),v._v(" "),t("p",[v._v("第二范式是满足属性对主键是完全函数依赖的。")]),v._v(" "),t("p",[v._v("第三范式是指在满足第二范式的情况下，消除表中的传递依赖。")]),v._v(" "),t("ul",[t("li",[v._v("数据库常见的命令")]),v._v(" "),t("li",[v._v("说说分库与分表设计")])]),v._v(" "),t("p",[t("strong",[v._v("垂直分表")]),v._v("在日常开发和设计中比较常见，通俗的说法叫做“大表拆小表”，拆分是基于关系型数据库中的“列”（字段）进行的。通常情况，某个表中的字段比较多，可以新建立一张“扩展表”，将不经常使用或者长度较大的字段拆分出去放到“扩展表”中。在字段很多的情况下，拆分开确实更便于开发和维护")]),v._v(" "),t("p",[t("strong",[v._v("垂直分库")]),v._v("在“微服务”盛行的今天已经非常普及了。基本的思路就是按照业务模块来划分出不同的数据库，而不是像早期一样将所有的数据表都放到同一个数据库中。系统层面的“服务化”拆分操作，能够解决业务系统层面的耦合和性能瓶颈，有利于系统的扩展维护。而数据库层面的拆分，道理也是相通的。")]),v._v(" "),t("p",[t("strong",[v._v("水平分表")]),v._v("也称为横向分表，比较容易理解，就是将表中不同的数据行按照一定规律分布到不同的数据库表中（这些表保存在同一个数据库中），这样来降低单表数据量，优化查询性能。最常见的方式就是通过主键或者时间等字段进行Hash和取模后拆分。水平分表，能够降低单表的数据量，一定程度上可以缓解查询性能瓶颈。但本质上这些表还保存在同一个库中，所以库级别还是会有IO瓶颈。所以，一般不建议采用这种做法。")]),v._v(" "),t("p",[t("strong",[v._v("水平分库分表")]),v._v("与上面讲到的水平分表的思想相同，唯一不同的就是将这些拆分出来的表保存在不同的数据中。这也是很多大型互联网公司所选择的做法。某种意义上来讲，有些系统中使用的“冷热数据分离”（将一些使用较少的历史数据迁移到其他的数据库中。而在业务功能上，通常默认只提供热点数据的查询），也是类似的实践。在高并发和海量数据的场景下，分库分表能够有效缓解单机和单库的性能瓶颈和压力，突破IO、连接数、硬件资源的瓶颈。当然，投入的硬件成本也会更高。同时，这也会带来一些复杂的技术问题和挑战（例如：跨分片的复杂查询，跨分片事务等）")]),v._v(" "),t("ul",[t("li",[v._v("分库与分表带来的分布式困境与应对之策（如何解决分布式下的分库分表，全局表？）")])]),v._v(" "),t("p",[v._v("数据迁移与扩容问题")]),v._v(" "),t("p",[v._v("表关联问题")]),v._v(" "),t("p",[v._v("分页与排序问题")]),v._v(" "),t("p",[v._v("分布式事务问题")]),v._v(" "),t("p",[v._v("分布式全局唯一ID")]),v._v(" "),t("ul",[t("li",[v._v("说说 SQL 优化之道")]),v._v(" "),t("li",[v._v("MySQL遇到的死锁问题、如何排查与解决")])]),v._v(" "),t("p",[v._v("查日志、查隔离级别、查最近一次死锁日志、分析原因")]),v._v(" "),t("ul",[t("li",[v._v("存储引擎的 InnoDB与MyISAM区别，优缺点，使用场景")])]),v._v(" "),t("p",[t("strong",[v._v("1， 事务处理")])]),v._v(" "),t("p",[v._v("Myisam 的执行速度更快，性能更好。")]),v._v(" "),t("p",[t("strong",[v._v("2，select ,update ,insert ,delete 操作")])]),v._v(" "),t("p",[v._v("MyISAM：如果执行大量的SELECT，MyISAM是更好的选择")]),v._v(" "),t("p",[v._v("InnoDB：如果你的数据执行大量的INSERT或UPDATE，出于性能方面的考虑，应该使用InnoDB表")]),v._v(" "),t("p",[t("strong",[v._v("3，锁机制不同")])]),v._v(" "),t("p",[v._v("InnoDB 为行级锁，myisam 为表级锁。")]),v._v(" "),t("p",[v._v("注意：当数据库无法确定，所找的行时，也会变为锁定整个表。")]),v._v(" "),t("p",[v._v('如： update table set num = 10 where username like "%test%";')]),v._v(" "),t("p",[t("strong",[v._v("4，查询表的行数不同")])]),v._v(" "),t("p",[v._v("MyISAM：select count("),t("em",[v._v(") from table,MyISAM只要简单的读出保存好的行数，注意的是，当count(")]),v._v(")语句包含   where条件时，两种表的操作是一样的")]),v._v(" "),t("p",[v._v("InnoDB ： InnoDB 中不保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行")]),v._v(" "),t("p",[t("strong",[v._v("5，物理结构不同")])]),v._v(" "),t("p",[v._v("MyISAM ：每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。")]),v._v(" "),t("p",[v._v(".frm文件存储表定义。")]),v._v(" "),t("p",[v._v("数据文件的扩展名为.MYD (MYData)。")]),v._v(" "),t("p",[v._v("索引文件的扩展名是.MYI (MYIndex)")]),v._v(" "),t("p",[v._v("InnoDB：基于磁盘的资源是InnoDB表空间数据文件和它的日志文件，InnoDB 表的大小只受限于操作系统文件的大小，一般为 2GB")]),v._v(" "),t("p",[t("strong",[v._v("6，anto_increment 机制不同")])]),v._v(" "),t("p",[v._v("更好和更快的auto_increment处理")]),v._v(" "),t("p",[t("strong",[v._v("其他：为什么")]),v._v("MyISAM"),t("strong",[v._v("会比Innodb 的查询速度快。")])]),v._v(" "),t("p",[v._v("INNODB在做SELECT的时候，要维护的东西比MYISAM引擎多很多；\n1）数据块，INNODB要缓存，MYISAM只缓存索引块，  这中间还有换进换出的减少；\n2）innodb寻址要映射到块，再到行，MYISAM 记录的直接是文件的OFFSET，定位比INNODB要快\n3）INNODB还需要维护MVCC一致；虽然你的场景没有，但他还是需要去检查和维护")]),v._v(" "),t("p",[v._v("MVCC ( Multi-Version Concurrency Control )多版本并发控制")]),v._v(" "),t("p",[v._v("InnoDB：通过为每一行记录添加两个额外的隐藏的值来实现MVCC，这两个值一个记录这行数据何时被创建，另外一个记录这行数据何时过期（或者被删 除）。但是InnoDB并不存储这些事件发生时的实际时间，相反它只存储这些事件发生时的系统版本号。这是一个随着事务的创建而不断增长的数字。每个事务 在事务开始时会记录它自己的系统版本号。每个查询必须去检查每行数据的版本号与事务的版本号是否相同。让我们来看看当隔离级别是REPEATABLE READ时这种策略是如何应用到特定的操作的：")]),v._v(" "),t("p",[v._v("SELECT InnoDB必须每行数据来保证它符合两个条件：")]),v._v(" "),t("p",[v._v("1、InnoDB必须找到一个行的版本，它至少要和事务的版本一样老(也即它的版本号不大于事务的版本号)。这保证了不管是事务开始之前，或者事务创建时，或者修改了这行数据的时候，这行数据是存在的。")]),v._v(" "),t("p",[v._v("2、这行数据的删除版本必须是未定义的或者比事务版本要大。这可以保证在事务开始之前这行数据没有被删除。")]),v._v(" "),t("ul",[t("li",[v._v("索引类别（B+树索引、全文索引、哈希索引）、索引的原理")]),v._v(" "),t("li",[v._v("什么是自适应哈希索引（AHI）")]),v._v(" "),t("li",[v._v("为什么要用 B+tree作为MySQL索引的数据结构")]),v._v(" "),t("li",[v._v("聚集索引与非聚集索引的区别")]),v._v(" "),t("li",[v._v("遇到过索引失效的情况没，什么时候可能会出现，如何解决")]),v._v(" "),t("li",[v._v("limit 20000 加载很慢怎么解决")])]),v._v(" "),t("p",[v._v("前端加缓存")]),v._v(" "),t("p",[v._v("使用延迟关联，即先通用 limit 得到需要数据的索引字段，然后再通过原表和索引字段关联获得需要数据")]),v._v(" "),t("p",[v._v("限制分页数")]),v._v(" "),t("p",[v._v("保存上次查询的最大id")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("如何选择合适的分布式主键方案")]),v._v(" "),t("ul",[t("li",[v._v("数据库自增长序列或字段")]),v._v(" "),t("li",[v._v("UUID")]),v._v(" "),t("li",[t("strong",[v._v("使用 UUID to Int64 的方法")])]),v._v(" "),t("li",[t("strong",[v._v("Redis 生成 ID")])]),v._v(" "),t("li",[t("strong",[v._v("Twitter 的 snowflake 算法")])]),v._v(" "),t("li",[t("strong",[v._v("利用 zookeeper 生成唯一 ID")])]),v._v(" "),t("li",[v._v("MongoDB 的 ObjectId")])])]),v._v(" "),t("li",[t("p",[v._v("选择合适的数据存储方案")])]),v._v(" "),t("li",[t("p",[v._v("常见的数据库优化方案，在你的项目中数据库如何进行优化的")])]),v._v(" "),t("li",[t("p",[v._v("数据库索引，什么是全文索引，全文索引中的倒排索引是什么原理；")]),v._v(" "),t("p",[v._v("倒排索引（英语：Inverted index），也常被称为反向索引、置入档案或反向档案，是一种索引方法，被用来存储在全文搜索下某个单词在一个文档或者一组文档中的存储位置的映射。它是文档检索系统中最常用的数据结构。有两种不同的反向索引形式：")]),v._v(" "),t("ul",[t("li",[v._v("一条记录的水平反向索引（或者反向档案索引）包含每个引用单词的文档的列表。")]),v._v(" "),t("li",[v._v("一个单词的水平反向索引（或者完全反向索引）又包含每个单词在一个文档中的位置。")])])]),v._v(" "),t("li",[t("p",[v._v("数据库最佳左前缀原则是什么？")]),v._v(" "),t("p",[v._v("最左优先，以最左边的为起点任何连续的索引都能匹配上，")]),v._v(" "),t("p",[v._v("当创建(a,b,c)复合索引时，想要索引生效的话,只能使用 a和a,b和a,b,c三种组合")])]),v._v(" "),t("li",[t("p",[v._v("悲观锁和乐观锁的原理和应用场景；")])]),v._v(" "),t("li",[t("p",[v._v("左连接、右连接、内连接、外连接、交叉连接、笛卡儿积等；")])])]),v._v(" "),t("p",[t("strong",[v._v("内连接：只返回满足条件的数据")])]),v._v(" "),t("p",[t("strong",[v._v("左外连接，只返回满足左表的数据【左表数据全部会显示】")])]),v._v(" "),t("p",[t("strong",[v._v("右外连接，只返回满足右表的数据【右表数据全部会显示】")])]),v._v(" "),t("p",[t("strong",[v._v("完全连接：返回左表和右表所有数据")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("一般情况下数据库宕机了如何进行恢复（什么是Write Ahead Log机制，什么是Double Write机制，什么是Check Point）；")])]),v._v(" "),t("li",[t("p",[v._v("什么是redo日志、什么是undo日志；")])]),v._v(" "),t("li",[t("p",[v._v("关系型数据库和非关系型数据库区别；")])]),v._v(" "),t("li",[t("p",[v._v("数据库死锁如何解决；")])]),v._v(" "),t("li",[t("p",[v._v("MySQL中的MVCC机制是什么意思，根据具体场景，MVCC是否有问题；")])]),v._v(" "),t("li",[t("p",[v._v("InnoDB的插入缓冲和两次写的概率和意义；")])]),v._v(" "),t("li",[t("p",[v._v("如果建了⼀个单列索引，查询的时候查出2列，会⽤到这个单列索引吗？（会用到）")])]),v._v(" "),t("li",[t("p",[v._v("如果建了⼀个包含多个列的索引，查询的时候只⽤了第⼀列，能不能⽤上这个索引？查三列呢？")])]),v._v(" "),t("li",[t("p",[v._v("接上题，如果where条件后⾯带有⼀个 i + 5 < 100 会使⽤到这个索引吗？")])]),v._v(" "),t("li",[t("p",[v._v("like %aaa%会使⽤索引吗? like aaa%呢?")])]),v._v(" "),t("li",[t("p",[v._v("drop、truncate、delete的区别？")])]),v._v(" "),t("li",[t("p",[v._v("平时你们是怎么监控数据库的? 慢SQL是怎么排查的？（慢查询日志）")])]),v._v(" "),t("li",[t("p",[v._v("你们数据库是否⽀持emoji表情，如果不⽀持，如何操作?选择什么编码方式？如果支持一个表情占几个字节?(utf8mb4)；")])]),v._v(" "),t("li",[t("p",[v._v("如果查询很慢，你会想到的第⼀个⽅式是什么？（数据库索引）")])])]),v._v(" "),t("h2",{attrs:{id:"jdbc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdbc","aria-hidden":"true"}},[v._v("#")]),v._v(" JDBC")]),v._v(" "),t("h2",{attrs:{id:"spring-jdbc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-jdbc","aria-hidden":"true"}},[v._v("#")]),v._v(" Spring JDBC")]),v._v(" "),t("h2",{attrs:{id:"spring-data-jpa"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-jpa","aria-hidden":"true"}},[v._v("#")]),v._v(" Spring Data JPA")]),v._v(" "),t("h2",{attrs:{id:"mybatis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybatis","aria-hidden":"true"}},[v._v("#")]),v._v(" MyBatis")])])},[],!1,null,null,null);_.default=i.exports}}]);