(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{208:function(a,t,r){"use strict";r.r(t);var e=r(0),i=Object(e.a)({},function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"kafka"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kafka","aria-hidden":"true"}},[a._v("#")]),a._v(" Kafka")]),a._v(" "),r("h2",{attrs:{id:"kafka是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kafka是什么","aria-hidden":"true"}},[a._v("#")]),a._v(" kafka是什么")]),a._v(" "),r("p",[a._v("在流式计算中，kafka一般用来缓存数据，storm通过消费kafka的数据进行计算。")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("Apache kafka是一个开源的消息系统，由scala写成，是由Apache软件基金会开发的一个开源消息系统项目。")])]),a._v(" "),r("li",[r("p",[a._v("kafka最初始由Linkedin公司开发，并于2011年初开源。2012年10月从Apache incubator毕业。该项目的目标是为处理实时数据提供一个统一、高通量、低等待的平台。")])]),a._v(" "),r("li",[r("p",[a._v("kafka是一个分布式消息队列。kafa对消息保存时根据Topic进行归类，发送消息者为Producer，消息接收者为Consumer，此外kafka集群有多个kafka实例组成，每个实例（server）称为broker。")])]),a._v(" "),r("li",[r("p",[a._v("无论是kafa集群，还是producer和Consumer都依赖于zookeeper集群保存一些meta信息，来保证系统可用性。")])])]),a._v(" "),r("h2",{attrs:{id:"实现原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实现原理","aria-hidden":"true"}},[a._v("#")]),a._v(" 实现原理")]),a._v(" "),r("p",[r("img",{attrs:{src:"http://ww3.sinaimg.cn/large/006tNc79gy1g5aapiqb0rj31sy0u0n6z.jpg",alt:"img"}})]),a._v(" "),r("p",[a._v("1、点对点模式（一对一，消费者主动拉取数据，消息收到后消息清除）")]),a._v(" "),r("p",[a._v("点对点模型通常是一个基于拉取或者轮询的消息传送模型，这种模型从队列中请求信息，而不是将消息推送到客户端。这个模型的特点是发送到队列的消息被一个且只有一个接收者接收处理，即使有多个消息监听者也是如此。")]),a._v(" "),r("p",[a._v("2、发布/订阅模式（一对多，数据生产后，推送给所有订阅者）")]),a._v(" "),r("p",[a._v("发布订阅模型则是一个基于推送的消息传送模型。发布订阅模型可以有多种不同的订阅者，临时订阅者只在主动监听主题时才接收消息，而持久订阅者则监听主题的所有消息，即使当前订阅者不可用，处于离线状态。")]),a._v(" "),r("h2",{attrs:{id:"为什么需要消息队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要消息队列","aria-hidden":"true"}},[a._v("#")]),a._v(" 为什么需要消息队列")]),a._v(" "),r("h3",{attrs:{id:"解耦"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解耦","aria-hidden":"true"}},[a._v("#")]),a._v(" 解耦")]),a._v(" "),r("p",[a._v("允许独立的扩展或修改两边的处理过程，只要确保它们遵守统一的接口约束。")]),a._v(" "),r("h3",{attrs:{id:"冗余"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#冗余","aria-hidden":"true"}},[a._v("#")]),a._v(" 冗余")]),a._v(" "),r("p",[a._v("消息队列把数据进行持久化直到他们已经完全处理，通过这一方式规避了数据丢失防线。许多消息队列采用的“插入-获取-删除”范式中，在把一个消息从消息队列中删除之前，需要处理系统明确的指出该消息已经被处理完毕，从而确保数据被安全的保存直到使用完毕。")]),a._v(" "),r("h3",{attrs:{id:"扩展性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#扩展性","aria-hidden":"true"}},[a._v("#")]),a._v(" 扩展性")]),a._v(" "),r("p",[a._v("因为消息队列解耦了处理过程，所以增大消息入队和处理频率是很容易的事情，只要另外增加处理过程即可。")]),a._v(" "),r("h3",{attrs:{id:"灵活性和峰值处理能力"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#灵活性和峰值处理能力","aria-hidden":"true"}},[a._v("#")]),a._v(" 灵活性和峰值处理能力")]),a._v(" "),r("p",[a._v("在访问量剧增的情况下，应用仍然需要继续发挥作用，但只有的突发流量并不常见。如果为了处理这类峰值访问的标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关节组件顶住突发访问的压力，而不会因为突发的超负荷的请求而全面崩溃。")]),a._v(" "),r("h3",{attrs:{id:"可恢复性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#可恢复性","aria-hidden":"true"}},[a._v("#")]),a._v(" 可恢复性")]),a._v(" "),r("p",[a._v("体统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。")]),a._v(" "),r("h3",{attrs:{id:"顺序保证"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#顺序保证","aria-hidden":"true"}},[a._v("#")]),a._v(" 顺序保证")]),a._v(" "),r("p",[a._v("在大多数的场景下，数据处理的顺序都很重要。大部分消息队列本生就是排序的，并且保证数据会按照特定的顺序来处理。（kafka保证一个partition内部的消息的有序性）。")]),a._v(" "),r("h3",{attrs:{id:"缓冲"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缓冲","aria-hidden":"true"}},[a._v("#")]),a._v(" 缓冲")]),a._v(" "),r("p",[a._v("有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。")]),a._v(" "),r("h3",{attrs:{id:"异步通信"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异步通信","aria-hidden":"true"}},[a._v("#")]),a._v(" 异步通信")]),a._v(" "),r("p",[a._v("有些时候，用户并不想立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。")]),a._v(" "),r("h2",{attrs:{id:"kafka架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kafka架构","aria-hidden":"true"}},[a._v("#")]),a._v(" kafka架构")]),a._v(" "),r("p",[r("img",{attrs:{src:"http://ww4.sinaimg.cn/large/006tNc79gy1g5aapawg6pj31ib0r4186.jpg",alt:"img"}})]),a._v(" "),r("p",[a._v("Producer：消息生产者，向kafka broker发消息的客户端。")]),a._v(" "),r("p",[a._v("Consumer：消息消费者，想kafka broker获取消息的客户端。")]),a._v(" "),r("p",[a._v("Topic：可以理解为队列")]),a._v(" "),r("p",[a._v("Consumer Group（CG）：这是kafka用来实现一个topic消息的广播（发给所有的Consumer）和单播（发给任意一个Consumer）的手段。一个topic可以有多个CG。topic的消息会复制给Consumer。如果需要实现广播，只要每个Consumer有一个独立的CG就可以了。要实现单播只要所有的Consumer在同一个CG中。用CG还可以将Consumer进行自由的分组而不需要多次发送消息到不同的topic。")]),a._v(" "),r("p",[a._v("Broker：一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。")]),a._v(" "),r("p",[a._v("Partition：为了实现扩展性，一个非常大的topic可以分布到多个Broker（即服务器）上，一个topic可以分为多个Partition，每个partition是一个有序队列。Partition中的每条消息都会被分配一个有序的id（offset）。kafka只保证按一个partition中顺序将消息发给Consumer，不保证一个topic的整体（多个partition）的顺序。")]),a._v(" "),r("p",[a._v("Offset：kafka的村塾文件都是按照offset.kafka来命名，用offset做名字的好处就是方便查找。比如想找到2049的位置，只要找到2048.kafka的文件即可。the first offset是 00000000000.kafka")]),a._v(" "),r("h2",{attrs:{id:"分布式模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分布式模型","aria-hidden":"true"}},[a._v("#")]),a._v(" 分布式模型")]),a._v(" "),r("p",[a._v("Kafka每个主题（Topic）的多个分区日志分布式存储在Kafka集群上，同时为了故障容错，每个分区都会以副本的方式复制到多个消息代理节点上。其中一个节点会作为主副本（leader），其他节点作为备份副本（Follower，备份副本）。主副本会负责所有客户端读写操作，备份副本仅仅从主副本同步数据。当主副本出现故障时，备份副本中的一个副本会被选择为新的主副本。因为每个分区的副本只有一个主副本接收读写，所以每个服务器都会作为某些分区的主副本，以及另外一些分区的备份副本，这样kafka集群的所有服务端整体上对客户端是负载均衡的。")]),a._v(" "),r("p",[a._v("kafka的生产者和消费者相对于服务器端而言都是客户端。")]),a._v(" "),r("p",[a._v("kafka生产者客户端发布消息到服务端的指定主题，会指定消息所属的分区。生产者发布消息时根据消息是否有键，来采取不同的分区策略。消息没有键时，通过轮询方式进行客户端负载均衡；消息有键时，根据分区语义保证相同键的消息总是发送到同一个分区。")]),a._v(" "),r("p",[a._v("Kafka的消费者通过订阅主题来消费消息，并且每个消费者都会设置一个消费组名称。因为生产者发布到主题的每一条消息都只会发送给消费者组的一个消费者。所以，如果要实现传统消息系统的“队列”模型，可以让每个消费者都拥有相同的消费组名称，这样消息就会负责均衡到所有的消费者；如果要实现“发布-订阅”模型，则每个消费者的消费者组名称都不相同，这样每条消息就会广播给所有的消费者。")]),a._v(" "),r("p",[a._v("分区是消费者现场模型的最小并行单位。如下图（图1）所示，生产者发布消息到一台服务器的3个分区时，只有一个消费者消费所有的3个分区。在下图（图2）中，3个分区分布在3台服务器上，同时有3个消费者分别消费不同的分区。假设每个服务器的吞吐量时300MB，在下图（图1）中分摊到每个分区只有100MB，而在下图（图2）中，集群整体的吞吐量有900MB。可以看到，增加服务器节点会提升集群的性能，增加消费者数量会提升处理性能。")]),a._v(" "),r("p",[a._v("同一个消费组下多个消费者互相协调消费工作，Kafka会将所有的分区平均地分配给所有的消费者实例，这样每个消费者都可以分配到数量均等的分区。Kafka的消费组管理协议会动态地维护消费组的成员列表，当一个新消费者加入消费者组，或者有消费者离开消费组，都会触发再平衡操作。")]),a._v(" "),r("p",[r("img",{attrs:{src:"http://ww4.sinaimg.cn/large/006tNc79gy1g5ac55h7bhj30pb0plq5n.jpg",alt:"img"}})]),a._v(" "),r("p",[a._v("Kafka的消费者消费消息时，只保证在一个分区内的消息的完全有序性，并不保证同一个主题汇中多个分区的消息顺序。而且，消费者读取一个分区消息的顺序和生产者写入到这个分区的顺序是一致的。比如，生产者写入“hello”和“Kafka”两条消息到分区P1，则消费者读取到的顺序也一定是“hello”和“Kafka”。如果业务上需要保证所有消息完全一致，只能通过设置一个分区完成，但这种做法的缺点是最多只能有一个消费者进行消费。一般来说，只需要保证每个分区的有序性，再对消息假设键来保证相同键的所有消息落入同一分区，就可以满足绝大多数的应用。")]),a._v(" "),r("h2",{attrs:{id:"操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 操作")]),a._v(" "),r("h3",{attrs:{id:"命令行操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#命令行操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 命令行操作")]),a._v(" "),r("p",[a._v("1.查看当前服务器中的所有topic")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("bin/kafka-topics.sh --zookeeper localhost:2181 --list\n")])])]),r("p",[a._v("2.创建topic")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("bin/kafka-topics.sh --zookeeper localhost:2181 --create --replication-factor 3 --partitions 1 --topic first\n\n")])])]),r("p",[a._v("参数说明：")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("--topic 定义topic名")])]),a._v(" "),r("li",[r("p",[a._v("--replication-factor 定义副本数")])]),a._v(" "),r("li",[r("p",[a._v("--partitions 定义分区数")])])]),a._v(" "),r("p",[a._v("3.删除topic")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("bin/kafka-topics.sh --zookeeper localhost:2181 --delete --topic first\n")])])]),r("p",[a._v("需要server.properties中设置delete.topic.enable = true 否则只是标记删除或者直接重启")]),a._v(" "),r("p",[a._v("4.发送消息")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("bin/kafka-console-producer.sh --broker-list localhost:9092 --topic first\n")])])]),r("p",[a._v("在输入需要发送的内容")]),a._v(" "),r("p",[a._v("5.消费消息")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("bin/kafka-console-consumer.sh --zookeeper localhost:2181 --from-beginning --topic first\n")])])]),r("p",[a._v("--from-beginning：会吧first主题中以往所有的数据都读出来。更具业务场景选择是否增加该配置。")]),a._v(" "),r("p",[a._v("6.查看某个Topic的详情")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("bin/kafka-topics.sh --zookeeper loaclhost:2181 --describe --topic first\n")])])]),r("h3",{attrs:{id:"生产者写入流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生产者写入流程","aria-hidden":"true"}},[a._v("#")]),a._v(" 生产者写入流程")]),a._v(" "),r("p",[a._v("1.写入方式")]),a._v(" "),r("p",[a._v("Producer采用推（push）模式将消息发送到broker，每条消息都被追加（append）到分区（partition）中，属于顺序写磁盘（顺序写磁盘效率比随机写要高，保障kafka吞吐率，在读取使用的时候读取速度也会更快）。")]),a._v(" "),r("p",[a._v("2.分区（partition）")]),a._v(" "),r("p",[a._v("kafka集群有多个消息代理服务器（broker-server）组成，发布到Kafka集群的每条消息都有一个类别，用主题（topic）来表示。通常，不同应用产生不同类型的数据，可以设置不同的主题。一个主题一般会有多个消息的订阅者，当生产者发布消息到某个主题时，订阅了这个主题的消费者都可以接收到生产者写入的新消息。")]),a._v(" "),r("p",[a._v("kafka集群为每一个主题维护了分布式的分区（partition）日志文件，物理意义上可以把主题（topic）看作进行了分区的日志文件（partition log）。主题的每个分区都是一个有序的、不可变的记录序列，新的消息会不断追加到日志中。分区中的每条消息都会按照时间顺序分配到一个单调递增的顺序编号，叫做偏移量（offset），这个偏移量能够唯一的定位当前分区的每一条消息。")]),a._v(" "),r("p",[a._v("消息发送时都被发送到一个topic，本质就是一个目录，而topic是由一些partitionLogs（分区日志）组成，其组织结构如下。")]),a._v(" "),r("p",[a._v("图中的topic有3个分区，每个分区的偏移量都从0开始，不同分区之间的偏移量都是独立的，不会互相影响。")]),a._v(" "),r("p",[r("img",{attrs:{src:"http://ww4.sinaimg.cn/large/006tNc79gy1g5ac59pj7rj30sa0vrtdt.jpg",alt:"img"}})]),a._v(" "),r("p",[a._v("每个partition中的消息都是有序的，生产的消息被不断追加到partition log上，其中的每个消息都被赋予了一个唯一的offset值。")]),a._v(" "),r("p",[a._v("发布到kafka主题的每条消息包括键值和时间戳。消息到达服务器端的指定分区后，都会被分配一个自增的偏移量。原始的消息内容和分配的偏移量以及其他一些元数据信息最后都会存储到分区日志文件中。消息的键也可以不用设置，这个情况下消息会均衡地分布到不同的分区。")]),a._v(" "),r("p",[a._v("分区原因")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("方便在集群中扩展，每个Partition可以通过调整以适应它所在的机器，而一个topic有可以有多个Partition组成，因此整个集群就可以适应任意大小的数据了。")])]),a._v(" "),r("li",[r("p",[a._v("可以提高并发，因为可以以partition为单位读写了。")])])]),a._v(" "),r("p",[a._v("传统消息系统在服务端保持消息的顺序，如果有多个消息者消息同一个消息队列，服务端会以消费存储的顺序依次发送给消费者。但由于消息是异步发送给消费者的，消息到达消费者的顺序可能是无序的，这就意味着在并行消费时，传统消息系统无法很好地保证消息被顺序处理。虽然我们可以设置一个专用的消费者值消费一个队列，以此来解决消息顺序的问题，但是这就使得消费处理无法真正执行。")]),a._v(" "),r("p",[a._v("kafka比传统消息系统有更强的顺序性保证，它使用主题的分区作为消息处理的并行单元。kafka以分区作为最小的粒度，将每个分区分配给消费者组中不同的而且是唯一的消费者，并确保一个分区只属于一个消费者，即这个消费者就是这个分区的唯一读取线程。那么只要分区的消息是有序的，消费者处理的消息顺序就有保证。每个主题有多个分区，不同的消费者处理不同的分区，所以kafka不仅保证了消息的有序性，也做到了消费者的负载均衡。")]),a._v(" "),r("p",[a._v("3.副本（Replication）")]),a._v(" "),r("p",[a._v("同一个partition可能会有多个replication（对应server.properties配置中的default.replication.factor=N）。没有replication的情况下，一旦broker宕机，其中所有partition的数据都不可被消费，同时producer也不能再将数据存于其上的partition。引入replication之后，同一个partition可能会有多个replication，而这时需要在这些replication之间选出一个leader，producer和consumer只与这个leader交互，其它replication作为follower从leader中复制数据。")]),a._v(" "),r("p",[a._v("4.写入流程")]),a._v(" "),r("p",[r("img",{attrs:{src:"http://ww4.sinaimg.cn/large/006tNc79gy1g5ac5cw2cij30zl0hq0uv.jpg",alt:"img"}})]),a._v(" "),r("ol",[r("li",[a._v("producer先从zookeeper的“/brokers/.../state”节点找到该partition的leader")]),a._v(" "),r("li",[a._v("producer将消息发送给该leader")]),a._v(" "),r("li",[a._v("leader将消息写入本地log")]),a._v(" "),r("li",[a._v("followers从leader pull消息，写入本地log后向leader发送ACK")]),a._v(" "),r("li",[a._v("leader收到所有ISR中的replication的ACK后，增加HW（high watermark，最后commit的offset）并向producer发送ACK。")])]),a._v(" "),r("h3",{attrs:{id:"消费过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#消费过程","aria-hidden":"true"}},[a._v("#")]),a._v(" 消费过程")]),a._v(" "),r("h4",{attrs:{id:"kafka在zookeeper中的存储结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kafka在zookeeper中的存储结构","aria-hidden":"true"}},[a._v("#")]),a._v(" kafka在zookeeper中的存储结构")]),a._v(" "),r("p",[r("img",{attrs:{src:"http://ww2.sinaimg.cn/large/006tNc79gy1g5ac5fuqi7j310q0kpacz.jpg",alt:"img"}})]),a._v(" "),r("p",[a._v("producer不在zk中注册，消费者在zk中注册。")]),a._v(" "),r("h4",{attrs:{id:"kafka消费过程分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kafka消费过程分析","aria-hidden":"true"}},[a._v("#")]),a._v(" kafka消费过程分析")]),a._v(" "),r("p",[a._v("kafka提供了两套consumer API：高级Consumer Api和低级Api")]),a._v(" "),r("p",[a._v("1.高级Api")]),a._v(" "),r("p",[a._v("优点：")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("编写简单，不需要自行管理offset，系统通过zookeeper自行管理")])]),a._v(" "),r("li",[r("p",[a._v("不需要管理分区，副本等情况，系统自动管理。")])]),a._v(" "),r("li",[r("p",[a._v("消费者断线会自动根据上一次记录在zookeeper中的offset去接着获取数据（默认设置1分钟更新一下zookeeper中存的offset）")])]),a._v(" "),r("li",[r("p",[a._v("可以使用group来区分一个topic的不同程序访问分离开来")])])]),a._v(" "),r("p",[a._v("缺点")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("不能手动控制offset")])]),a._v(" "),r("li",[r("p",[a._v("不能细化控制分区、副本、zk等")])])]),a._v(" "),r("p",[a._v("2.低级Api")]),a._v(" "),r("p",[a._v("优点")]),a._v(" "),r("p",[a._v("能够让开发者自己控制offset")]),a._v(" "),r("p",[a._v("手动控制连接分区，对分区自定义负载均衡策略")]),a._v(" "),r("p",[a._v("对zookeeper的依赖性降低")]),a._v(" "),r("p",[a._v("缺点")]),a._v(" "),r("p",[a._v("过于复杂，手动控制offset的代价过高")]),a._v(" "),r("p",[a._v("3.消费者模型")]),a._v(" "),r("p",[a._v("​    消息有生产者发布到kafka集群后，会被消费者消费。消息的消费模型有两种，推送模型（push）和拉取模型（pull）。")]),a._v(" "),r("p",[a._v("​    基于推送模型（push）的消息系统，有消息代理记录消费者的消费状态。消息代理在将消息推送到消费者后，标记这条消息已经消费，但这种方式无法很好地保证消费被处理。如果要保证消息被处理，消息代理发送完消息后，要设置状态为“已发送”，只要收到消费者的确认请求后才更新为“已消费”，这就需要代理中记录所有的消费状态，但显然这种方式不可取。")]),a._v(" "),r("p",[a._v("​    kafka采用拉取模型，由消费者自己记录消费状态，每个消费者互相独立地顺序拉取每个分区的消息。如下图所示，有两个消费者（不同消费者组）拉取同一个主题的消息，消费者A的消费进度是3，消费者B的消费进度是6。消费者拉取的最大上限通过最高水位（watermark）控制，生产者最新写入的消息如果还没有达到备份数量，对消费者是不可见的。这种由消费者控制偏移量的优点是：消费者可以按照任意的顺序消费消息。比如，消费者可以重置到旧的偏移量，重新处理之前已经消费过的消息；或者直接跳到最近的位置，从当前的时刻开始消费。")]),a._v(" "),r("p",[r("img",{attrs:{src:"http://ww4.sinaimg.cn/large/006tNc79gy1g5ac5ik252j30lh06u74f.jpg",alt:"img"}})]),a._v(" "),r("p",[a._v("​    在一些消息系统中，消息代理会在消息被消费之后立即删除消息。如果有不同类型的消费者订阅同一个主题，消息代理可能需要冗余地存储同一消息；或者等所有消费者都消费完才删除，这就需要消息代理跟踪每个消费者的消费状态，这种设计很大程度上限制了消息系统的整体吞吐量和处理延迟。Kafka的做法是生产者发布的所有消息会一致保存在Kafka集群中，不管消息有没有被消费。用户可以通过设置保留时间来清理过期的数据，比如，设置保留策略为两天。那么，在消息发布之后，它可以被不同的消费者消费，在两天之后，过期的消息就会自动清理掉。")]),a._v(" "),r("p",[a._v("4.消费者组")]),a._v(" "),r("p",[r("img",{attrs:{src:"http://ww4.sinaimg.cn/large/006tNc79gy1g5ac5mdpo4j30x50e1gmr.jpg",alt:"img"}})]),a._v(" "),r("p",[a._v("​    消费者是以consumer group消费者组的方式工作，由一个或者多个消费者组成一个组，共同消费一个topic。每个分区在同一时间只能由group中的一个消费者读取，但是多个group可以同时消费这个partition。在图中，有一个由三个消费者组成的group，有一个消费者读取主题中的两个分区，另外两个分别读取一个分区。某个消费者读取某个分区，也可以叫做某个消费者是某个分区的拥有者。")]),a._v(" "),r("p",[a._v("​    在这种情况下，消费者可以通过水平扩展的方式同时读取大量的消息。另外，如果一个消费者失败了，那么其他的group成员会自动负载均衡读取之前失败的消费者读取的分区。")]),a._v(" "),r("p",[a._v("5.消费方式")]),a._v(" "),r("p",[a._v("​    consumer采用pull（拉）模式从broker中读取数据。")]),a._v(" "),r("p",[a._v("​    push（推）模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。它的目标是尽可能以最快速度传递消息，但是这样很容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而pull模式则可以根据consumer的消费能力以适当的速率消费消息。")]),a._v(" "),r("p",[a._v("​    对于Kafka而言，pull模式更合适，它可简化broker的设计，consumer可自主控制消费消息的速率，同时consumer可以自己控制消费方式——即可批量消费也可逐条消费，同时还能选择不同的提交方式从而实现不同的传输语义。")]),a._v(" "),r("p",[a._v("​    pull模式不足之处是，如果kafka没有数据，消费者可能会陷入循环中，一直等待数据到达。为了避免这种情况，我们在我们的拉请求中有参数，允许消费者请求在等待数据到达的“长轮询”中进行阻塞（并且可选地等待到给定的字节数，以确保大的传输大小）。")])])},[],!1,null,null,null);t.default=i.exports}}]);